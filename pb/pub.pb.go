// Code generated by protoc-gen-gogo.
// source: pub.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 当前赛季
type DanSeason struct {
	Start     uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End       uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Remaining uint32 `protobuf:"varint,3,opt,name=remaining,proto3" json:"remaining,omitempty"`
}

func (m *DanSeason) Reset()                    { *m = DanSeason{} }
func (*DanSeason) ProtoMessage()               {}
func (*DanSeason) Descriptor() ([]byte, []int) { return fileDescriptorPub, []int{0} }

func (m *DanSeason) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *DanSeason) GetEnd() uint32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *DanSeason) GetRemaining() uint32 {
	if m != nil {
		return m.Remaining
	}
	return 0
}

// 排行榜
type DanRanking struct {
	Rank     uint32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Userid   string `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Photo    string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
	Nickname string `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Dan      uint32 `protobuf:"varint,5,opt,name=dan,proto3" json:"dan,omitempty"`
	Stars    uint32 `protobuf:"varint,6,opt,name=stars,proto3" json:"stars,omitempty"`
	Points   uint32 `protobuf:"varint,7,opt,name=points,proto3" json:"points,omitempty"`
}

func (m *DanRanking) Reset()                    { *m = DanRanking{} }
func (*DanRanking) ProtoMessage()               {}
func (*DanRanking) Descriptor() ([]byte, []int) { return fileDescriptorPub, []int{1} }

func (m *DanRanking) GetRank() uint32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *DanRanking) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *DanRanking) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *DanRanking) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *DanRanking) GetDan() uint32 {
	if m != nil {
		return m.Dan
	}
	return 0
}

func (m *DanRanking) GetStars() uint32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

func (m *DanRanking) GetPoints() uint32 {
	if m != nil {
		return m.Points
	}
	return 0
}

// 任务列表
type DanTaskList struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Diamond uint32 `protobuf:"varint,3,opt,name=diamond,proto3" json:"diamond,omitempty"`
	Coin    uint32 `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
	Status  uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *DanTaskList) Reset()                    { *m = DanTaskList{} }
func (*DanTaskList) ProtoMessage()               {}
func (*DanTaskList) Descriptor() ([]byte, []int) { return fileDescriptorPub, []int{2} }

func (m *DanTaskList) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DanTaskList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DanTaskList) GetDiamond() uint32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *DanTaskList) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *DanTaskList) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// 排位赛段位列表
type DanList struct {
	Id     string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Dan    uint32     `protobuf:"varint,3,opt,name=dan,proto3" json:"dan,omitempty"`
	Level  []*DanInfo `protobuf:"bytes,4,rep,name=level" json:"level,omitempty"`
	Number uint32     `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *DanList) Reset()                    { *m = DanList{} }
func (*DanList) ProtoMessage()               {}
func (*DanList) Descriptor() ([]byte, []int) { return fileDescriptorPub, []int{3} }

func (m *DanList) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DanList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DanList) GetDan() uint32 {
	if m != nil {
		return m.Dan
	}
	return 0
}

func (m *DanList) GetLevel() []*DanInfo {
	if m != nil {
		return m.Level
	}
	return nil
}

func (m *DanList) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

// 段位对应星级积分
type DanInfo struct {
	Stars  uint32 `protobuf:"varint,1,opt,name=stars,proto3" json:"stars,omitempty"`
	Points uint32 `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
}

func (m *DanInfo) Reset()                    { *m = DanInfo{} }
func (*DanInfo) ProtoMessage()               {}
func (*DanInfo) Descriptor() ([]byte, []int) { return fileDescriptorPub, []int{4} }

func (m *DanInfo) GetStars() uint32 {
	if m != nil {
		return m.Stars
	}
	return 0
}

func (m *DanInfo) GetPoints() uint32 {
	if m != nil {
		return m.Points
	}
	return 0
}

// 个人战绩
type DanCombat struct {
	Number    uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Wins      uint32 `protobuf:"varint,2,opt,name=wins,proto3" json:"wins,omitempty"`
	TopDan    uint32 `protobuf:"varint,3,opt,name=topDan,proto3" json:"topDan,omitempty"`
	TopRank   uint32 `protobuf:"varint,4,opt,name=topRank,proto3" json:"topRank,omitempty"`
	CurDan    uint32 `protobuf:"varint,5,opt,name=curDan,proto3" json:"curDan,omitempty"`
	CurStars  uint32 `protobuf:"varint,6,opt,name=curStars,proto3" json:"curStars,omitempty"`
	CurPoints uint32 `protobuf:"varint,7,opt,name=curPoints,proto3" json:"curPoints,omitempty"`
	CurRank   uint32 `protobuf:"varint,8,opt,name=curRank,proto3" json:"curRank,omitempty"`
}

func (m *DanCombat) Reset()                    { *m = DanCombat{} }
func (*DanCombat) ProtoMessage()               {}
func (*DanCombat) Descriptor() ([]byte, []int) { return fileDescriptorPub, []int{5} }

func (m *DanCombat) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *DanCombat) GetWins() uint32 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *DanCombat) GetTopDan() uint32 {
	if m != nil {
		return m.TopDan
	}
	return 0
}

func (m *DanCombat) GetTopRank() uint32 {
	if m != nil {
		return m.TopRank
	}
	return 0
}

func (m *DanCombat) GetCurDan() uint32 {
	if m != nil {
		return m.CurDan
	}
	return 0
}

func (m *DanCombat) GetCurStars() uint32 {
	if m != nil {
		return m.CurStars
	}
	return 0
}

func (m *DanCombat) GetCurPoints() uint32 {
	if m != nil {
		return m.CurPoints
	}
	return 0
}

func (m *DanCombat) GetCurRank() uint32 {
	if m != nil {
		return m.CurRank
	}
	return 0
}

func init() {
	proto.RegisterType((*DanSeason)(nil), "pb.DanSeason")
	proto.RegisterType((*DanRanking)(nil), "pb.DanRanking")
	proto.RegisterType((*DanTaskList)(nil), "pb.DanTaskList")
	proto.RegisterType((*DanList)(nil), "pb.DanList")
	proto.RegisterType((*DanInfo)(nil), "pb.DanInfo")
	proto.RegisterType((*DanCombat)(nil), "pb.DanCombat")
}
func (this *DanSeason) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DanSeason)
	if !ok {
		that2, ok := that.(DanSeason)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.End != that1.End {
		return false
	}
	if this.Remaining != that1.Remaining {
		return false
	}
	return true
}
func (this *DanRanking) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DanRanking)
	if !ok {
		that2, ok := that.(DanRanking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Dan != that1.Dan {
		return false
	}
	if this.Stars != that1.Stars {
		return false
	}
	if this.Points != that1.Points {
		return false
	}
	return true
}
func (this *DanTaskList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DanTaskList)
	if !ok {
		that2, ok := that.(DanTaskList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Diamond != that1.Diamond {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *DanList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DanList)
	if !ok {
		that2, ok := that.(DanList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Dan != that1.Dan {
		return false
	}
	if len(this.Level) != len(that1.Level) {
		return false
	}
	for i := range this.Level {
		if !this.Level[i].Equal(that1.Level[i]) {
			return false
		}
	}
	if this.Number != that1.Number {
		return false
	}
	return true
}
func (this *DanInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DanInfo)
	if !ok {
		that2, ok := that.(DanInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Stars != that1.Stars {
		return false
	}
	if this.Points != that1.Points {
		return false
	}
	return true
}
func (this *DanCombat) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DanCombat)
	if !ok {
		that2, ok := that.(DanCombat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Wins != that1.Wins {
		return false
	}
	if this.TopDan != that1.TopDan {
		return false
	}
	if this.TopRank != that1.TopRank {
		return false
	}
	if this.CurDan != that1.CurDan {
		return false
	}
	if this.CurStars != that1.CurStars {
		return false
	}
	if this.CurPoints != that1.CurPoints {
		return false
	}
	if this.CurRank != that1.CurRank {
		return false
	}
	return true
}
func (this *DanSeason) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.DanSeason{")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	s = append(s, "End: "+fmt.Sprintf("%#v", this.End)+",\n")
	s = append(s, "Remaining: "+fmt.Sprintf("%#v", this.Remaining)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DanRanking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.DanRanking{")
	s = append(s, "Rank: "+fmt.Sprintf("%#v", this.Rank)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Dan: "+fmt.Sprintf("%#v", this.Dan)+",\n")
	s = append(s, "Stars: "+fmt.Sprintf("%#v", this.Stars)+",\n")
	s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DanTaskList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.DanTaskList{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Diamond: "+fmt.Sprintf("%#v", this.Diamond)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DanList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.DanList{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Dan: "+fmt.Sprintf("%#v", this.Dan)+",\n")
	if this.Level != nil {
		s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	}
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DanInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.DanInfo{")
	s = append(s, "Stars: "+fmt.Sprintf("%#v", this.Stars)+",\n")
	s = append(s, "Points: "+fmt.Sprintf("%#v", this.Points)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DanCombat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.DanCombat{")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Wins: "+fmt.Sprintf("%#v", this.Wins)+",\n")
	s = append(s, "TopDan: "+fmt.Sprintf("%#v", this.TopDan)+",\n")
	s = append(s, "TopRank: "+fmt.Sprintf("%#v", this.TopRank)+",\n")
	s = append(s, "CurDan: "+fmt.Sprintf("%#v", this.CurDan)+",\n")
	s = append(s, "CurStars: "+fmt.Sprintf("%#v", this.CurStars)+",\n")
	s = append(s, "CurPoints: "+fmt.Sprintf("%#v", this.CurPoints)+",\n")
	s = append(s, "CurRank: "+fmt.Sprintf("%#v", this.CurRank)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPub(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *DanSeason) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanSeason) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.End))
	}
	if m.Remaining != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Remaining))
	}
	return i, nil
}

func (m *DanRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanRanking) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Rank))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPub(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPub(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPub(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Dan != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Dan))
	}
	if m.Stars != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Stars))
	}
	if m.Points != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Points))
	}
	return i, nil
}

func (m *DanTaskList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanTaskList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPub(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPub(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Diamond))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Coin))
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *DanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPub(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPub(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Dan != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Dan))
	}
	if len(m.Level) > 0 {
		for _, msg := range m.Level {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPub(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Number != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Number))
	}
	return i, nil
}

func (m *DanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stars != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Stars))
	}
	if m.Points != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Points))
	}
	return i, nil
}

func (m *DanCombat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DanCombat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Number))
	}
	if m.Wins != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.Wins))
	}
	if m.TopDan != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.TopDan))
	}
	if m.TopRank != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.TopRank))
	}
	if m.CurDan != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.CurDan))
	}
	if m.CurStars != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.CurStars))
	}
	if m.CurPoints != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.CurPoints))
	}
	if m.CurRank != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPub(dAtA, i, uint64(m.CurRank))
	}
	return i, nil
}

func encodeFixed64Pub(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pub(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPub(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DanSeason) Size() (n int) {
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovPub(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovPub(uint64(m.End))
	}
	if m.Remaining != 0 {
		n += 1 + sovPub(uint64(m.Remaining))
	}
	return n
}

func (m *DanRanking) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovPub(uint64(m.Rank))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovPub(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovPub(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovPub(uint64(l))
	}
	if m.Dan != 0 {
		n += 1 + sovPub(uint64(m.Dan))
	}
	if m.Stars != 0 {
		n += 1 + sovPub(uint64(m.Stars))
	}
	if m.Points != 0 {
		n += 1 + sovPub(uint64(m.Points))
	}
	return n
}

func (m *DanTaskList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPub(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPub(uint64(l))
	}
	if m.Diamond != 0 {
		n += 1 + sovPub(uint64(m.Diamond))
	}
	if m.Coin != 0 {
		n += 1 + sovPub(uint64(m.Coin))
	}
	if m.Status != 0 {
		n += 1 + sovPub(uint64(m.Status))
	}
	return n
}

func (m *DanList) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPub(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPub(uint64(l))
	}
	if m.Dan != 0 {
		n += 1 + sovPub(uint64(m.Dan))
	}
	if len(m.Level) > 0 {
		for _, e := range m.Level {
			l = e.Size()
			n += 1 + l + sovPub(uint64(l))
		}
	}
	if m.Number != 0 {
		n += 1 + sovPub(uint64(m.Number))
	}
	return n
}

func (m *DanInfo) Size() (n int) {
	var l int
	_ = l
	if m.Stars != 0 {
		n += 1 + sovPub(uint64(m.Stars))
	}
	if m.Points != 0 {
		n += 1 + sovPub(uint64(m.Points))
	}
	return n
}

func (m *DanCombat) Size() (n int) {
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovPub(uint64(m.Number))
	}
	if m.Wins != 0 {
		n += 1 + sovPub(uint64(m.Wins))
	}
	if m.TopDan != 0 {
		n += 1 + sovPub(uint64(m.TopDan))
	}
	if m.TopRank != 0 {
		n += 1 + sovPub(uint64(m.TopRank))
	}
	if m.CurDan != 0 {
		n += 1 + sovPub(uint64(m.CurDan))
	}
	if m.CurStars != 0 {
		n += 1 + sovPub(uint64(m.CurStars))
	}
	if m.CurPoints != 0 {
		n += 1 + sovPub(uint64(m.CurPoints))
	}
	if m.CurRank != 0 {
		n += 1 + sovPub(uint64(m.CurRank))
	}
	return n
}

func sovPub(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPub(x uint64) (n int) {
	return sovPub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DanSeason) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DanSeason{`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`Remaining:` + fmt.Sprintf("%v", this.Remaining) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DanRanking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DanRanking{`,
		`Rank:` + fmt.Sprintf("%v", this.Rank) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Dan:` + fmt.Sprintf("%v", this.Dan) + `,`,
		`Stars:` + fmt.Sprintf("%v", this.Stars) + `,`,
		`Points:` + fmt.Sprintf("%v", this.Points) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DanTaskList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DanTaskList{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Diamond:` + fmt.Sprintf("%v", this.Diamond) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DanList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DanList{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Dan:` + fmt.Sprintf("%v", this.Dan) + `,`,
		`Level:` + strings.Replace(fmt.Sprintf("%v", this.Level), "DanInfo", "DanInfo", 1) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DanInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DanInfo{`,
		`Stars:` + fmt.Sprintf("%v", this.Stars) + `,`,
		`Points:` + fmt.Sprintf("%v", this.Points) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DanCombat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DanCombat{`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Wins:` + fmt.Sprintf("%v", this.Wins) + `,`,
		`TopDan:` + fmt.Sprintf("%v", this.TopDan) + `,`,
		`TopRank:` + fmt.Sprintf("%v", this.TopRank) + `,`,
		`CurDan:` + fmt.Sprintf("%v", this.CurDan) + `,`,
		`CurStars:` + fmt.Sprintf("%v", this.CurStars) + `,`,
		`CurPoints:` + fmt.Sprintf("%v", this.CurPoints) + `,`,
		`CurRank:` + fmt.Sprintf("%v", this.CurRank) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DanSeason) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanSeason: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanSeason: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remaining", wireType)
			}
			m.Remaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Remaining |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DanRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dan", wireType)
			}
			m.Dan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stars", wireType)
			}
			m.Stars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stars |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DanTaskList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanTaskList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanTaskList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dan", wireType)
			}
			m.Dan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPub
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = append(m.Level, &DanInfo{})
			if err := m.Level[len(m.Level)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stars", wireType)
			}
			m.Stars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stars |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DanCombat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DanCombat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DanCombat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopDan", wireType)
			}
			m.TopDan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopDan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRank", wireType)
			}
			m.TopRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurDan", wireType)
			}
			m.CurDan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurDan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurStars", wireType)
			}
			m.CurStars = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurStars |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurPoints", wireType)
			}
			m.CurPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurPoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurRank", wireType)
			}
			m.CurRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurRank |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPub
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPub
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPub(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPub = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPub   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pub.proto", fileDescriptorPub) }

var fileDescriptorPub = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xbd, 0x8e, 0xd4, 0x30,
	0x10, 0xc7, 0xd7, 0xd9, 0xaf, 0x8b, 0x57, 0x87, 0x90, 0x85, 0x50, 0x84, 0x90, 0x75, 0xa4, 0xba,
	0x02, 0x6d, 0x01, 0x05, 0x3d, 0xa4, 0x41, 0xa2, 0x80, 0x1c, 0x2f, 0x30, 0xf9, 0xe0, 0xb0, 0xf6,
	0x32, 0x8e, 0x6c, 0x87, 0x93, 0xa8, 0x78, 0x04, 0x1e, 0x03, 0xf1, 0x24, 0x94, 0xd7, 0x20, 0x51,
	0xb2, 0xa1, 0xa1, 0xbc, 0x47, 0x40, 0xe3, 0x78, 0x93, 0x45, 0xa2, 0xa0, 0x9b, 0xdf, 0xc4, 0x9e,
	0xff, 0x7f, 0xc6, 0x13, 0x1e, 0xb7, 0x5d, 0xb1, 0x6d, 0x8d, 0x76, 0x5a, 0x44, 0x6d, 0x91, 0xbe,
	0xe1, 0x71, 0x06, 0x78, 0x51, 0x83, 0xd5, 0x28, 0xee, 0xf1, 0xa5, 0x75, 0x60, 0x5c, 0xc2, 0xce,
	0xd8, 0xf9, 0x69, 0x3e, 0x80, 0xb8, 0xcb, 0xe7, 0x35, 0x56, 0x49, 0xe4, 0x73, 0x14, 0x8a, 0x87,
	0x3c, 0x36, 0x75, 0x03, 0x0a, 0x15, 0x5e, 0x26, 0x73, 0x9f, 0x9f, 0x12, 0xe9, 0x57, 0xc6, 0x79,
	0x06, 0x98, 0x03, 0xee, 0x14, 0x5e, 0x0a, 0xc1, 0x17, 0x06, 0x70, 0x17, 0x6a, 0xfa, 0x58, 0xdc,
	0xe7, 0xab, 0xce, 0xd6, 0x46, 0x0d, 0x55, 0xe3, 0x3c, 0x10, 0x19, 0x68, 0xdf, 0x6b, 0xa7, 0x7d,
	0xd1, 0x38, 0x1f, 0x40, 0x3c, 0xe0, 0x27, 0xa8, 0xca, 0x1d, 0x42, 0x53, 0x27, 0x0b, 0xff, 0x61,
	0x64, 0x32, 0x57, 0x01, 0x26, 0xcb, 0xc1, 0x5c, 0x05, 0x63, 0x13, 0x36, 0x59, 0x4d, 0x4d, 0x58,
	0x52, 0x6c, 0xb5, 0x42, 0x67, 0x93, 0xb5, 0x4f, 0x07, 0x4a, 0xaf, 0xf9, 0x26, 0x03, 0x7c, 0x0b,
	0x76, 0xf7, 0x4a, 0x59, 0x27, 0xee, 0xf0, 0x48, 0x55, 0xde, 0x6a, 0x9c, 0x47, 0xaa, 0x22, 0xf3,
	0x5e, 0x76, 0xb0, 0xe9, 0x63, 0x91, 0xf0, 0x75, 0xa5, 0xa0, 0xd1, 0x58, 0x85, 0xde, 0x0f, 0x48,
	0xa7, 0x4b, 0xad, 0xd0, 0x9b, 0x3c, 0xcd, 0x7d, 0x4c, 0xc2, 0xd6, 0x81, 0xeb, 0x6c, 0xf0, 0x18,
	0x28, 0xfd, 0xc8, 0xd7, 0x19, 0xe0, 0x7f, 0x8b, 0x86, 0x3e, 0xe7, 0x53, 0x9f, 0x8f, 0xf8, 0xf2,
	0xaa, 0xfe, 0x50, 0x5f, 0x25, 0x8b, 0xb3, 0xf9, 0xf9, 0xe6, 0xc9, 0x66, 0xdb, 0x16, 0xdb, 0x0c,
	0xf0, 0x25, 0xbe, 0xd3, 0xf9, 0xf0, 0x85, 0xb4, 0xb1, 0x6b, 0x8a, 0xda, 0x1c, 0xb4, 0x07, 0x4a,
	0x9f, 0x79, 0x6d, 0x3a, 0x39, 0x4d, 0x8b, 0xfd, 0x7b, 0x5a, 0xd1, 0x5f, 0xd3, 0xfa, 0xce, 0xfc,
	0xba, 0xbc, 0xd0, 0x4d, 0x01, 0xee, 0xa8, 0x3c, 0x3b, 0x2e, 0x4f, 0xfe, 0xaf, 0x15, 0x1e, 0xee,
	0xfa, 0x98, 0xce, 0x3a, 0xdd, 0x66, 0x63, 0x0b, 0x81, 0x68, 0x98, 0x4e, 0xb7, 0xb4, 0x2b, 0x61,
	0x6a, 0x07, 0xa4, 0x1b, 0x65, 0x67, 0xb2, 0xf1, 0x71, 0x03, 0xd1, 0x36, 0x94, 0x9d, 0xb9, 0x38,
	0x7a, 0xe2, 0x91, 0x69, 0x31, 0xcb, 0xce, 0xbc, 0x3e, 0x7e, 0xe8, 0x29, 0x41, 0x5a, 0x65, 0x67,
	0xbc, 0xd6, 0xc9, 0xa0, 0x15, 0xf0, 0xf9, 0xe3, 0x9b, 0xbd, 0x9c, 0xfd, 0xd8, 0xcb, 0xd9, 0xed,
	0x5e, 0xb2, 0x4f, 0xbd, 0x64, 0x5f, 0x7a, 0xc9, 0xbe, 0xf5, 0x92, 0xdd, 0xf4, 0x92, 0xfd, 0xec,
	0x25, 0xfb, 0xdd, 0xcb, 0xd9, 0x6d, 0x2f, 0xd9, 0xe7, 0x5f, 0x72, 0x56, 0xac, 0xfc, 0xef, 0xf3,
	0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0xeb, 0x7a, 0xac, 0x4b, 0x03, 0x00, 0x00,
}
