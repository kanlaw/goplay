// Code generated by protoc-gen-gogo.
// source: prize.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CPrizeList struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CPrizeList) Reset()                    { *m = CPrizeList{} }
func (*CPrizeList) ProtoMessage()               {}
func (*CPrizeList) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{0} }

func (m *CPrizeList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SPrizeList struct {
	Code  uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*Prize `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode  `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPrizeList) Reset()                    { *m = SPrizeList{} }
func (*SPrizeList) ProtoMessage()               {}
func (*SPrizeList) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{1} }

func (m *SPrizeList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPrizeList) GetList() []*Prize {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SPrizeList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type CPrizeDraw struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CPrizeDraw) Reset()                    { *m = CPrizeDraw{} }
func (*CPrizeDraw) ProtoMessage()               {}
func (*CPrizeDraw) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{2} }

func (m *CPrizeDraw) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SPrizeDraw struct {
	Code      uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Leftdraw  uint32   `protobuf:"varint,2,opt,name=leftdraw,proto3" json:"leftdraw,omitempty"`
	Prizedraw uint32   `protobuf:"varint,3,opt,name=prizedraw,proto3" json:"prizedraw,omitempty"`
	List      []*Prize `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
	Error     ErrCode  `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPrizeDraw) Reset()                    { *m = SPrizeDraw{} }
func (*SPrizeDraw) ProtoMessage()               {}
func (*SPrizeDraw) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{3} }

func (m *SPrizeDraw) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPrizeDraw) GetLeftdraw() uint32 {
	if m != nil {
		return m.Leftdraw
	}
	return 0
}

func (m *SPrizeDraw) GetPrizedraw() uint32 {
	if m != nil {
		return m.Prizedraw
	}
	return 0
}

func (m *SPrizeDraw) GetList() []*Prize {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SPrizeDraw) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type CPrizeBox struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CPrizeBox) Reset()                    { *m = CPrizeBox{} }
func (*CPrizeBox) ProtoMessage()               {}
func (*CPrizeBox) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{4} }

func (m *CPrizeBox) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CPrizeBox) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type SPrizeBox struct {
	Code     uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Time     uint32   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Duration uint32   `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	State    uint32   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	List     []*Prize `protobuf:"bytes,5,rep,name=list" json:"list,omitempty"`
	Next     []*Prize `protobuf:"bytes,6,rep,name=next" json:"next,omitempty"`
	Error    ErrCode  `protobuf:"varint,7,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPrizeBox) Reset()                    { *m = SPrizeBox{} }
func (*SPrizeBox) ProtoMessage()               {}
func (*SPrizeBox) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{5} }

func (m *SPrizeBox) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPrizeBox) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SPrizeBox) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SPrizeBox) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SPrizeBox) GetList() []*Prize {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SPrizeBox) GetNext() []*Prize {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *SPrizeBox) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 奖品
type Prize struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rtype  uint32 `protobuf:"varint,2,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Number uint32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *Prize) Reset()                    { *m = Prize{} }
func (*Prize) ProtoMessage()               {}
func (*Prize) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{6} }

func (m *Prize) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Prize) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *Prize) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type CBankrupts struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CBankrupts) Reset()                    { *m = CBankrupts{} }
func (*CBankrupts) ProtoMessage()               {}
func (*CBankrupts) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{7} }

func (m *CBankrupts) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SBankrupts struct {
	Code     uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Relieve  uint32   `protobuf:"varint,2,opt,name=relieve,proto3" json:"relieve,omitempty"`
	Bankrupt uint32   `protobuf:"varint,3,opt,name=bankrupt,proto3" json:"bankrupt,omitempty"`
	List     []*Prize `protobuf:"bytes,4,rep,name=list" json:"list,omitempty"`
	Error    ErrCode  `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SBankrupts) Reset()                    { *m = SBankrupts{} }
func (*SBankrupts) ProtoMessage()               {}
func (*SBankrupts) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{8} }

func (m *SBankrupts) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SBankrupts) GetRelieve() uint32 {
	if m != nil {
		return m.Relieve
	}
	return 0
}

func (m *SBankrupts) GetBankrupt() uint32 {
	if m != nil {
		return m.Bankrupt
	}
	return 0
}

func (m *SBankrupts) GetList() []*Prize {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SBankrupts) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

type CClassicList struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CClassicList) Reset()                    { *m = CClassicList{} }
func (*CClassicList) ProtoMessage()               {}
func (*CClassicList) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{9} }

func (m *CClassicList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SClassicList struct {
	Code  uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*Classic `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode    `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SClassicList) Reset()                    { *m = SClassicList{} }
func (*SClassicList) ProtoMessage()               {}
func (*SClassicList) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{10} }

func (m *SClassicList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SClassicList) GetList() []*Classic {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SClassicList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 经典场
type Classic struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ptype   uint32 `protobuf:"varint,2,opt,name=ptype,proto3" json:"ptype,omitempty"`
	Rtype   uint32 `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Ante    uint32 `protobuf:"varint,4,opt,name=ante,proto3" json:"ante,omitempty"`
	Minimum uint32 `protobuf:"varint,5,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum uint32 `protobuf:"varint,6,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (m *Classic) Reset()                    { *m = Classic{} }
func (*Classic) ProtoMessage()               {}
func (*Classic) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{11} }

func (m *Classic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Classic) GetPtype() uint32 {
	if m != nil {
		return m.Ptype
	}
	return 0
}

func (m *Classic) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *Classic) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *Classic) GetMinimum() uint32 {
	if m != nil {
		return m.Minimum
	}
	return 0
}

func (m *Classic) GetMaximum() uint32 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

type CVipList struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CVipList) Reset()                    { *m = CVipList{} }
func (*CVipList) ProtoMessage()               {}
func (*CVipList) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{12} }

func (m *CVipList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SVipList struct {
	Code  uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*Vip  `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SVipList) Reset()                    { *m = SVipList{} }
func (*SVipList) ProtoMessage()               {}
func (*SVipList) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{13} }

func (m *SVipList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SVipList) GetList() []*Vip {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SVipList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// Vip
type Vip struct {
	Level  uint32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Pay    uint32 `protobuf:"varint,3,opt,name=pay,proto3" json:"pay,omitempty"`
	Prize  uint32 `protobuf:"varint,4,opt,name=prize,proto3" json:"prize,omitempty"`
	Kick   uint32 `protobuf:"varint,5,opt,name=kick,proto3" json:"kick,omitempty"`
}

func (m *Vip) Reset()                    { *m = Vip{} }
func (*Vip) ProtoMessage()               {}
func (*Vip) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{14} }

func (m *Vip) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Vip) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Vip) GetPay() uint32 {
	if m != nil {
		return m.Pay
	}
	return 0
}

func (m *Vip) GetPrize() uint32 {
	if m != nil {
		return m.Prize
	}
	return 0
}

func (m *Vip) GetKick() uint32 {
	if m != nil {
		return m.Kick
	}
	return 0
}

type SPushVip struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Level  uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Number uint32 `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *SPushVip) Reset()                    { *m = SPushVip{} }
func (*SPushVip) ProtoMessage()               {}
func (*SPushVip) Descriptor() ([]byte, []int) { return fileDescriptorPrize, []int{15} }

func (m *SPushVip) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushVip) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SPushVip) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*CPrizeList)(nil), "pb.CPrizeList")
	proto.RegisterType((*SPrizeList)(nil), "pb.SPrizeList")
	proto.RegisterType((*CPrizeDraw)(nil), "pb.CPrizeDraw")
	proto.RegisterType((*SPrizeDraw)(nil), "pb.SPrizeDraw")
	proto.RegisterType((*CPrizeBox)(nil), "pb.CPrizeBox")
	proto.RegisterType((*SPrizeBox)(nil), "pb.SPrizeBox")
	proto.RegisterType((*Prize)(nil), "pb.Prize")
	proto.RegisterType((*CBankrupts)(nil), "pb.CBankrupts")
	proto.RegisterType((*SBankrupts)(nil), "pb.SBankrupts")
	proto.RegisterType((*CClassicList)(nil), "pb.CClassicList")
	proto.RegisterType((*SClassicList)(nil), "pb.SClassicList")
	proto.RegisterType((*Classic)(nil), "pb.Classic")
	proto.RegisterType((*CVipList)(nil), "pb.CVipList")
	proto.RegisterType((*SVipList)(nil), "pb.SVipList")
	proto.RegisterType((*Vip)(nil), "pb.Vip")
	proto.RegisterType((*SPushVip)(nil), "pb.SPushVip")
}
func (this *CPrizeList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CPrizeList)
	if !ok {
		that2, ok := that.(CPrizeList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SPrizeList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPrizeList)
	if !ok {
		that2, ok := that.(SPrizeList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CPrizeDraw) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CPrizeDraw)
	if !ok {
		that2, ok := that.(CPrizeDraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SPrizeDraw) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPrizeDraw)
	if !ok {
		that2, ok := that.(SPrizeDraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Leftdraw != that1.Leftdraw {
		return false
	}
	if this.Prizedraw != that1.Prizedraw {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CPrizeBox) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CPrizeBox)
	if !ok {
		that2, ok := that.(CPrizeBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *SPrizeBox) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPrizeBox)
	if !ok {
		that2, ok := that.(SPrizeBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if len(this.Next) != len(that1.Next) {
		return false
	}
	for i := range this.Next {
		if !this.Next[i].Equal(that1.Next[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Prize) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Prize)
	if !ok {
		that2, ok := that.(Prize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	return true
}
func (this *CBankrupts) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CBankrupts)
	if !ok {
		that2, ok := that.(CBankrupts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SBankrupts) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SBankrupts)
	if !ok {
		that2, ok := that.(SBankrupts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Relieve != that1.Relieve {
		return false
	}
	if this.Bankrupt != that1.Bankrupt {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CClassicList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CClassicList)
	if !ok {
		that2, ok := that.(CClassicList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SClassicList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SClassicList)
	if !ok {
		that2, ok := that.(SClassicList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Classic) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Classic)
	if !ok {
		that2, ok := that.(Classic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Ptype != that1.Ptype {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Minimum != that1.Minimum {
		return false
	}
	if this.Maximum != that1.Maximum {
		return false
	}
	return true
}
func (this *CVipList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CVipList)
	if !ok {
		that2, ok := that.(CVipList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SVipList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SVipList)
	if !ok {
		that2, ok := that.(SVipList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Vip) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Vip)
	if !ok {
		that2, ok := that.(Vip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Pay != that1.Pay {
		return false
	}
	if this.Prize != that1.Prize {
		return false
	}
	if this.Kick != that1.Kick {
		return false
	}
	return true
}
func (this *SPushVip) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushVip)
	if !ok {
		that2, ok := that.(SPushVip)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	return true
}
func (this *CPrizeList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CPrizeList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPrizeList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SPrizeList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPrizeDraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CPrizeDraw{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPrizeDraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SPrizeDraw{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Leftdraw: "+fmt.Sprintf("%#v", this.Leftdraw)+",\n")
	s = append(s, "Prizedraw: "+fmt.Sprintf("%#v", this.Prizedraw)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPrizeBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CPrizeBox{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPrizeBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SPrizeBox{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	if this.Next != nil {
		s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Prize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Prize{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CBankrupts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CBankrupts{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBankrupts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SBankrupts{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Relieve: "+fmt.Sprintf("%#v", this.Relieve)+",\n")
	s = append(s, "Bankrupt: "+fmt.Sprintf("%#v", this.Bankrupt)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CClassicList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CClassicList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SClassicList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SClassicList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Classic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.Classic{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Ptype: "+fmt.Sprintf("%#v", this.Ptype)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Minimum: "+fmt.Sprintf("%#v", this.Minimum)+",\n")
	s = append(s, "Maximum: "+fmt.Sprintf("%#v", this.Maximum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CVipList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CVipList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SVipList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SVipList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Vip{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Pay: "+fmt.Sprintf("%#v", this.Pay)+",\n")
	s = append(s, "Prize: "+fmt.Sprintf("%#v", this.Prize)+",\n")
	s = append(s, "Kick: "+fmt.Sprintf("%#v", this.Kick)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushVip) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SPushVip{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrize(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CPrizeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPrizeList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SPrizeList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPrizeList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPrize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CPrizeDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPrizeDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SPrizeDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPrizeDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if m.Leftdraw != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Leftdraw))
	}
	if m.Prizedraw != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Prizedraw))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPrize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CPrizeBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPrizeBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *SPrizeBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPrizeBox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Time))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Duration))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.State))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPrize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Next) > 0 {
		for _, msg := range m.Next {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPrize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *Prize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Prize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrize(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Rtype))
	}
	if m.Number != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Number))
	}
	return i, nil
}

func (m *CBankrupts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBankrupts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SBankrupts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBankrupts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if m.Relieve != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Relieve))
	}
	if m.Bankrupt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Bankrupt))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPrize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CClassicList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CClassicList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SClassicList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SClassicList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPrize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *Classic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Classic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrize(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Ptype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Ptype))
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Rtype))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Ante))
	}
	if m.Minimum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Maximum))
	}
	return i, nil
}

func (m *CVipList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CVipList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SVipList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SVipList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPrize(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *Vip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Level))
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Number))
	}
	if m.Pay != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Pay))
	}
	if m.Prize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Prize))
	}
	if m.Kick != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Kick))
	}
	return i, nil
}

func (m *SPushVip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushVip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Code))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Level))
	}
	if m.Number != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrize(dAtA, i, uint64(m.Number))
	}
	return i, nil
}

func encodeFixed64Prize(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Prize(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPrize(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CPrizeList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	return n
}

func (m *SPrizeList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovPrize(uint64(m.Error))
	}
	return n
}

func (m *CPrizeDraw) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	return n
}

func (m *SPrizeDraw) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if m.Leftdraw != 0 {
		n += 1 + sovPrize(uint64(m.Leftdraw))
	}
	if m.Prizedraw != 0 {
		n += 1 + sovPrize(uint64(m.Prizedraw))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovPrize(uint64(m.Error))
	}
	return n
}

func (m *CPrizeBox) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovPrize(uint64(m.State))
	}
	return n
}

func (m *SPrizeBox) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if m.Time != 0 {
		n += 1 + sovPrize(uint64(m.Time))
	}
	if m.Duration != 0 {
		n += 1 + sovPrize(uint64(m.Duration))
	}
	if m.State != 0 {
		n += 1 + sovPrize(uint64(m.State))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	if len(m.Next) > 0 {
		for _, e := range m.Next {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovPrize(uint64(m.Error))
	}
	return n
}

func (m *Prize) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPrize(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovPrize(uint64(m.Rtype))
	}
	if m.Number != 0 {
		n += 1 + sovPrize(uint64(m.Number))
	}
	return n
}

func (m *CBankrupts) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	return n
}

func (m *SBankrupts) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if m.Relieve != 0 {
		n += 1 + sovPrize(uint64(m.Relieve))
	}
	if m.Bankrupt != 0 {
		n += 1 + sovPrize(uint64(m.Bankrupt))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovPrize(uint64(m.Error))
	}
	return n
}

func (m *CClassicList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	return n
}

func (m *SClassicList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovPrize(uint64(m.Error))
	}
	return n
}

func (m *Classic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPrize(uint64(l))
	}
	if m.Ptype != 0 {
		n += 1 + sovPrize(uint64(m.Ptype))
	}
	if m.Rtype != 0 {
		n += 1 + sovPrize(uint64(m.Rtype))
	}
	if m.Ante != 0 {
		n += 1 + sovPrize(uint64(m.Ante))
	}
	if m.Minimum != 0 {
		n += 1 + sovPrize(uint64(m.Minimum))
	}
	if m.Maximum != 0 {
		n += 1 + sovPrize(uint64(m.Maximum))
	}
	return n
}

func (m *CVipList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	return n
}

func (m *SVipList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPrize(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovPrize(uint64(m.Error))
	}
	return n
}

func (m *Vip) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovPrize(uint64(m.Level))
	}
	if m.Number != 0 {
		n += 1 + sovPrize(uint64(m.Number))
	}
	if m.Pay != 0 {
		n += 1 + sovPrize(uint64(m.Pay))
	}
	if m.Prize != 0 {
		n += 1 + sovPrize(uint64(m.Prize))
	}
	if m.Kick != 0 {
		n += 1 + sovPrize(uint64(m.Kick))
	}
	return n
}

func (m *SPushVip) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPrize(uint64(m.Code))
	}
	if m.Level != 0 {
		n += 1 + sovPrize(uint64(m.Level))
	}
	if m.Number != 0 {
		n += 1 + sovPrize(uint64(m.Number))
	}
	return n
}

func sovPrize(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrize(x uint64) (n int) {
	return sovPrize(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CPrizeList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPrizeList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPrizeList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPrizeList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Prize", "Prize", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPrizeDraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPrizeDraw{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPrizeDraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPrizeDraw{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Leftdraw:` + fmt.Sprintf("%v", this.Leftdraw) + `,`,
		`Prizedraw:` + fmt.Sprintf("%v", this.Prizedraw) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Prize", "Prize", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPrizeBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPrizeBox{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPrizeBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPrizeBox{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Prize", "Prize", 1) + `,`,
		`Next:` + strings.Replace(fmt.Sprintf("%v", this.Next), "Prize", "Prize", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Prize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Prize{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CBankrupts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBankrupts{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBankrupts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBankrupts{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Relieve:` + fmt.Sprintf("%v", this.Relieve) + `,`,
		`Bankrupt:` + fmt.Sprintf("%v", this.Bankrupt) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Prize", "Prize", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CClassicList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CClassicList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SClassicList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SClassicList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Classic", "Classic", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Classic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Classic{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Ptype:` + fmt.Sprintf("%v", this.Ptype) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Minimum:` + fmt.Sprintf("%v", this.Minimum) + `,`,
		`Maximum:` + fmt.Sprintf("%v", this.Maximum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CVipList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CVipList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SVipList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SVipList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Vip", "Vip", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Vip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Vip{`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Pay:` + fmt.Sprintf("%v", this.Pay) + `,`,
		`Prize:` + fmt.Sprintf("%v", this.Prize) + `,`,
		`Kick:` + fmt.Sprintf("%v", this.Kick) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushVip) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushVip{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPrize(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CPrizeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPrizeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPrizeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPrizeList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPrizeList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPrizeList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Prize{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPrizeDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPrizeDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPrizeDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPrizeDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPrizeDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPrizeDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leftdraw", wireType)
			}
			m.Leftdraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leftdraw |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prizedraw", wireType)
			}
			m.Prizedraw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prizedraw |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Prize{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPrizeBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPrizeBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPrizeBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPrizeBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPrizeBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPrizeBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Prize{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = append(m.Next, &Prize{})
			if err := m.Next[len(m.Next)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Prize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Prize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Prize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CBankrupts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBankrupts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBankrupts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBankrupts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBankrupts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBankrupts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relieve", wireType)
			}
			m.Relieve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Relieve |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bankrupt", wireType)
			}
			m.Bankrupt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bankrupt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Prize{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CClassicList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CClassicList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CClassicList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SClassicList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SClassicList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SClassicList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Classic{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Classic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Classic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Classic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptype", wireType)
			}
			m.Ptype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimum", wireType)
			}
			m.Minimum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minimum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maximum", wireType)
			}
			m.Maximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maximum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CVipList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CVipList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CVipList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SVipList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SVipList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SVipList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrize
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Vip{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pay", wireType)
			}
			m.Pay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			m.Prize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kick", wireType)
			}
			m.Kick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kick |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushVip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushVip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushVip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrize(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrize
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrize(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrize
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrize
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrize
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrize
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrize(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrize = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrize   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prize.proto", fileDescriptorPrize) }

var fileDescriptorPrize = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbd, 0x6e, 0xdb, 0x3c,
	0x14, 0x35, 0x25, 0xf9, 0xef, 0xe6, 0x07, 0x1f, 0x88, 0x0f, 0x85, 0x90, 0x36, 0xac, 0xab, 0xc9,
	0x43, 0xe1, 0x21, 0x45, 0x5f, 0xc0, 0x6e, 0xb6, 0x0c, 0x81, 0x0d, 0x78, 0x2c, 0x20, 0x59, 0x0a,
	0x4a, 0x58, 0x96, 0x04, 0x8a, 0x4e, 0x9c, 0x4e, 0x7d, 0x81, 0x02, 0x1d, 0x3b, 0xf4, 0x01, 0xfa,
	0x24, 0x45, 0xc7, 0x8c, 0x1d, 0x6b, 0x75, 0xe9, 0x98, 0x47, 0x28, 0x78, 0x45, 0xc9, 0x36, 0x2a,
	0x39, 0x19, 0xba, 0xf1, 0xf0, 0xf0, 0x8a, 0xe7, 0x1c, 0xde, 0x2b, 0x38, 0x48, 0x04, 0x7f, 0x1f,
	0x0c, 0x12, 0x11, 0xcb, 0x98, 0x1a, 0x89, 0x77, 0x02, 0xb3, 0xd8, 0xd7, 0xd8, 0xe9, 0x01, 0x8c,
	0x2e, 0x15, 0x7f, 0xc1, 0x53, 0x49, 0x29, 0x58, 0x8a, 0xb3, 0x49, 0x8f, 0xf4, 0x8f, 0xc6, 0xb8,
	0x76, 0x3c, 0x80, 0xc9, 0xde, 0x13, 0xf4, 0x14, 0xac, 0x90, 0xa7, 0xd2, 0x36, 0x7a, 0x66, 0xff,
	0xe0, 0xac, 0x3b, 0x48, 0xbc, 0x01, 0x16, 0x8c, 0x71, 0x9b, 0xbe, 0x80, 0x66, 0x20, 0x44, 0x2c,
	0x6c, 0xb3, 0x47, 0xfa, 0xc7, 0x67, 0x07, 0x8a, 0x3f, 0x17, 0x62, 0x14, 0xfb, 0xc1, 0x38, 0x67,
	0x36, 0x2a, 0xde, 0x08, 0xf7, 0xa6, 0x52, 0xc5, 0x17, 0x52, 0xc8, 0xa8, 0x3b, 0x42, 0x4f, 0xa0,
	0x13, 0x06, 0x57, 0xd2, 0x17, 0xee, 0x8d, 0x6d, 0xe0, 0x7e, 0x89, 0xe9, 0x33, 0xe8, 0x62, 0x0a,
	0x48, 0x9a, 0x48, 0x6e, 0x36, 0x4a, 0x03, 0xd6, 0x03, 0x06, 0x9a, 0xb5, 0x06, 0x5e, 0x43, 0x37,
	0x37, 0x30, 0x8c, 0x57, 0x95, 0xe2, 0xfe, 0x87, 0x66, 0x2a, 0x5d, 0x19, 0x68, 0x65, 0x39, 0x70,
	0xbe, 0x11, 0xe8, 0x4e, 0xf6, 0xd6, 0x51, 0xb0, 0x24, 0x5f, 0x14, 0x65, 0xb8, 0x56, 0x46, 0xfd,
	0xa5, 0x70, 0x25, 0x8f, 0x23, 0xed, 0xa5, 0xc4, 0x9b, 0x7b, 0xac, 0xad, 0x7b, 0x4a, 0x83, 0xcd,
	0x6a, 0x83, 0xa7, 0x60, 0x45, 0xc1, 0x4a, 0xda, 0xad, 0xbf, 0x68, 0xb5, 0xbd, 0xf1, 0xdf, 0xae,
	0xf5, 0x7f, 0x0e, 0x4d, 0xac, 0xa0, 0xc7, 0x60, 0x70, 0x1f, 0x1d, 0x74, 0xc7, 0x06, 0xf7, 0x95,
	0x1e, 0x21, 0x6f, 0x93, 0xd2, 0x37, 0x02, 0xfa, 0x04, 0x5a, 0xd1, 0x72, 0xe1, 0x05, 0x42, 0xeb,
	0xd7, 0x08, 0xfb, 0x60, 0xe8, 0x46, 0x73, 0xb1, 0x4c, 0x64, 0x5a, 0xd9, 0x07, 0x9f, 0x55, 0x1f,
	0xec, 0x3d, 0x42, 0x6d, 0x68, 0x8b, 0x20, 0xe4, 0xc1, 0x75, 0x71, 0x69, 0x01, 0x55, 0x70, 0x9e,
	0x2e, 0x2d, 0x82, 0x2b, 0xf0, 0x3f, 0xe8, 0x01, 0x07, 0x0e, 0x47, 0xa3, 0xd0, 0x4d, 0x53, 0x3e,
	0xab, 0x1d, 0xa6, 0x2b, 0x38, 0x9c, 0x3c, 0x70, 0x86, 0x3e, 0xdf, 0x19, 0x27, 0xbc, 0x49, 0x97,
	0x3c, 0x7e, 0xa0, 0x3e, 0x12, 0x68, 0xeb, 0xa2, 0xaa, 0x27, 0x49, 0xb6, 0x9f, 0x04, 0xc1, 0xe6,
	0xa1, 0xcc, 0xed, 0x87, 0xa2, 0x60, 0xb9, 0x51, 0xd9, 0x4d, 0xb8, 0x56, 0xf9, 0x2e, 0x78, 0xc4,
	0x17, 0xcb, 0x05, 0x86, 0x71, 0x34, 0x2e, 0x20, 0x32, 0xee, 0x0a, 0x99, 0x96, 0x66, 0x72, 0xe8,
	0x30, 0xe8, 0x8c, 0xa6, 0x3c, 0xa9, 0xcd, 0xe5, 0x2d, 0x74, 0x26, 0x7b, 0x78, 0xfa, 0x74, 0x27,
	0x93, 0xb6, 0x72, 0x3c, 0xe5, 0xc9, 0xe3, 0xf3, 0x88, 0xc1, 0x9c, 0xf2, 0x44, 0x99, 0x0c, 0x83,
	0xeb, 0x20, 0xd4, 0xdf, 0xce, 0xc1, 0x56, 0x37, 0x1a, 0xdb, 0xdd, 0x48, 0xff, 0x03, 0x33, 0x71,
	0x6f, 0x75, 0x20, 0x6a, 0x89, 0xd1, 0xa9, 0xa6, 0x28, 0xa6, 0x0b, 0x81, 0x12, 0x3c, 0xe7, 0xb3,
	0xb9, 0x4e, 0x03, 0xd7, 0xce, 0x05, 0x74, 0x26, 0x97, 0xcb, 0xf4, 0x9d, 0xba, 0xb5, 0xe6, 0x7f,
	0x90, 0x2b, 0x31, 0xaa, 0x95, 0xec, 0xcc, 0xc5, 0xf0, 0xe5, 0xdd, 0x9a, 0x35, 0x7e, 0xac, 0x59,
	0xe3, 0x7e, 0xcd, 0xc8, 0x87, 0x8c, 0x91, 0xaf, 0x19, 0x23, 0xdf, 0x33, 0x46, 0xee, 0x32, 0x46,
	0x7e, 0x66, 0x8c, 0xfc, 0xce, 0x58, 0xe3, 0x3e, 0x63, 0xe4, 0xd3, 0x2f, 0xd6, 0xf0, 0x5a, 0xf8,
	0x6b, 0x7f, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x38, 0x66, 0x80, 0xf9, 0x05, 0x00, 0x00,
}
