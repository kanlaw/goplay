// Code generated by protoc-gen-gogo.
// source: free.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CEnterFreeRoom struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CEnterFreeRoom) Reset()                    { *m = CEnterFreeRoom{} }
func (*CEnterFreeRoom) ProtoMessage()               {}
func (*CEnterFreeRoom) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{0} }

func (m *CEnterFreeRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SEnterFreeRoom struct {
	Code     uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roominfo *FreeRoom   `protobuf:"bytes,2,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*FreeUser `protobuf:"bytes,3,rep,name=userinfo" json:"userinfo,omitempty"`
	Betsinfo []*RoomBets `protobuf:"bytes,5,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEnterFreeRoom) Reset()                    { *m = SEnterFreeRoom{} }
func (*SEnterFreeRoom) ProtoMessage()               {}
func (*SEnterFreeRoom) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{1} }

func (m *SEnterFreeRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SEnterFreeRoom) GetRoominfo() *FreeRoom {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SEnterFreeRoom) GetUserinfo() []*FreeUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEnterFreeRoom) GetBetsinfo() []*RoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SEnterFreeRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 其他玩家进入房间
type SFreeCamein struct {
	Code     uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userinfo *FreeUser `protobuf:"bytes,2,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *SFreeCamein) Reset()                    { *m = SFreeCamein{} }
func (*SFreeCamein) ProtoMessage()               {}
func (*SFreeCamein) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{2} }

func (m *SFreeCamein) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SFreeCamein) GetUserinfo() *FreeUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

// 3.选择上庄，下庄
type CFreeDealer struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Coin  uint32 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *CFreeDealer) Reset()                    { *m = CFreeDealer{} }
func (*CFreeDealer) ProtoMessage()               {}
func (*CFreeDealer) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{3} }

func (m *CFreeDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CFreeDealer) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CFreeDealer) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type SFreeDealer struct {
	Code     uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State    uint32  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Dealer   string  `protobuf:"bytes,3,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Userid   string  `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string  `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Coin     uint32  `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	Error    ErrCode `protobuf:"varint,7,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFreeDealer) Reset()                    { *m = SFreeDealer{} }
func (*SFreeDealer) ProtoMessage()               {}
func (*SFreeDealer) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{4} }

func (m *SFreeDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SFreeDealer) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SFreeDealer) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SFreeDealer) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SFreeDealer) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SFreeDealer) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SFreeDealer) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 3.上庄列表
type CDealerList struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CDealerList) Reset()                    { *m = CDealerList{} }
func (*CDealerList) ProtoMessage()               {}
func (*CDealerList) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{5} }

func (m *CDealerList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SDealerList struct {
	Code  uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*DealerList `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SDealerList) Reset()                    { *m = SDealerList{} }
func (*SDealerList) ProtoMessage()               {}
func (*SDealerList) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{6} }

func (m *SDealerList) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDealerList) GetList() []*DealerList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SDealerList) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 4.玩家入坐,站起
type CFreeSit struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Seat  uint32 `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (m *CFreeSit) Reset()                    { *m = CFreeSit{} }
func (*CFreeSit) ProtoMessage()               {}
func (*CFreeSit) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{7} }

func (m *CFreeSit) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CFreeSit) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *CFreeSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

type SFreeSit struct {
	Code     uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State    bool    `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Seat     uint32  `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	Userid   string  `protobuf:"bytes,4,opt,name=userid,proto3" json:"userid,omitempty"`
	Nickname string  `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Photo    string  `protobuf:"bytes,6,opt,name=photo,proto3" json:"photo,omitempty"`
	Coin     uint32  `protobuf:"varint,7,opt,name=coin,proto3" json:"coin,omitempty"`
	Error    ErrCode `protobuf:"varint,8,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFreeSit) Reset()                    { *m = SFreeSit{} }
func (*SFreeSit) ProtoMessage()               {}
func (*SFreeSit) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{8} }

func (m *SFreeSit) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SFreeSit) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *SFreeSit) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SFreeSit) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SFreeSit) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SFreeSit) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SFreeSit) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SFreeSit) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 4.玩家下注
type CFreeBet struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Value uint32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CFreeBet) Reset()                    { *m = CFreeBet{} }
func (*CFreeBet) ProtoMessage()               {}
func (*CFreeBet) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{9} }

func (m *CFreeBet) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CFreeBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *CFreeBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SFreeBet struct {
	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat   uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Beseat uint32  `protobuf:"varint,3,opt,name=beseat,proto3" json:"beseat,omitempty"`
	Value  uint32  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Userid string  `protobuf:"bytes,5,opt,name=userid,proto3" json:"userid,omitempty"`
	Coin   uint32  `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	Bets   uint32  `protobuf:"varint,7,opt,name=bets,proto3" json:"bets,omitempty"`
	Error  ErrCode `protobuf:"varint,8,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SFreeBet) Reset()                    { *m = SFreeBet{} }
func (*SFreeBet) ProtoMessage()               {}
func (*SFreeBet) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{10} }

func (m *SFreeBet) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SFreeBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SFreeBet) GetBeseat() uint32 {
	if m != nil {
		return m.Beseat
	}
	return 0
}

func (m *SFreeBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SFreeBet) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SFreeBet) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SFreeBet) GetBets() uint32 {
	if m != nil {
		return m.Bets
	}
	return 0
}

func (m *SFreeBet) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 结算广播接口，游戏开始
type SFreeGamestart struct {
	Code          uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State         uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Dealer        string `protobuf:"bytes,3,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Coin          uint32 `protobuf:"varint,4,opt,name=coin,proto3" json:"coin,omitempty"`
	Photo         string `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	DealerNum     uint32 `protobuf:"varint,6,opt,name=dealerNum,proto3" json:"dealerNum,omitempty"`
	LeftDealerNum uint32 `protobuf:"varint,7,opt,name=leftDealerNum,proto3" json:"leftDealerNum,omitempty"`
}

func (m *SFreeGamestart) Reset()                    { *m = SFreeGamestart{} }
func (*SFreeGamestart) ProtoMessage()               {}
func (*SFreeGamestart) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{11} }

func (m *SFreeGamestart) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SFreeGamestart) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SFreeGamestart) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SFreeGamestart) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SFreeGamestart) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SFreeGamestart) GetDealerNum() uint32 {
	if m != nil {
		return m.DealerNum
	}
	return 0
}

func (m *SFreeGamestart) GetLeftDealerNum() uint32 {
	if m != nil {
		return m.LeftDealerNum
	}
	return 0
}

// 结算广播接口，游戏结束
type SFreeGameover struct {
	Code          uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	State         uint32          `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Dealer        string          `protobuf:"bytes,3,opt,name=dealer,proto3" json:"dealer,omitempty"`
	DealerNum     uint32          `protobuf:"varint,4,opt,name=dealerNum,proto3" json:"dealerNum,omitempty"`
	LeftDealerNum uint32          `protobuf:"varint,5,opt,name=leftDealerNum,proto3" json:"leftDealerNum,omitempty"`
	Coin          uint32          `protobuf:"varint,6,opt,name=coin,proto3" json:"coin,omitempty"`
	Pond          uint32          `protobuf:"varint,7,opt,name=pond,proto3" json:"pond,omitempty"`
	Data          []*FreeRoomOver `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
	List          []*RoomScore    `protobuf:"bytes,9,rep,name=list" json:"list,omitempty"`
}

func (m *SFreeGameover) Reset()                    { *m = SFreeGameover{} }
func (*SFreeGameover) ProtoMessage()               {}
func (*SFreeGameover) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{12} }

func (m *SFreeGameover) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SFreeGameover) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SFreeGameover) GetDealer() string {
	if m != nil {
		return m.Dealer
	}
	return ""
}

func (m *SFreeGameover) GetDealerNum() uint32 {
	if m != nil {
		return m.DealerNum
	}
	return 0
}

func (m *SFreeGameover) GetLeftDealerNum() uint32 {
	if m != nil {
		return m.LeftDealerNum
	}
	return 0
}

func (m *SFreeGameover) GetCoin() uint32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *SFreeGameover) GetPond() uint32 {
	if m != nil {
		return m.Pond
	}
	return 0
}

func (m *SFreeGameover) GetData() []*FreeRoomOver {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SFreeGameover) GetList() []*RoomScore {
	if m != nil {
		return m.List
	}
	return nil
}

// 百人牛牛趋势
type CFreeTrend struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CFreeTrend) Reset()                    { *m = CFreeTrend{} }
func (*CFreeTrend) ProtoMessage()               {}
func (*CFreeTrend) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{13} }

func (m *CFreeTrend) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

// 百人牛牛趋势
type SFreeTrend struct {
	Code uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List []*FreeTrendList `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *SFreeTrend) Reset()                    { *m = SFreeTrend{} }
func (*SFreeTrend) ProtoMessage()               {}
func (*SFreeTrend) Descriptor() ([]byte, []int) { return fileDescriptorFree, []int{14} }

func (m *SFreeTrend) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SFreeTrend) GetList() []*FreeTrendList {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*CEnterFreeRoom)(nil), "pb.CEnterFreeRoom")
	proto.RegisterType((*SEnterFreeRoom)(nil), "pb.SEnterFreeRoom")
	proto.RegisterType((*SFreeCamein)(nil), "pb.SFreeCamein")
	proto.RegisterType((*CFreeDealer)(nil), "pb.CFreeDealer")
	proto.RegisterType((*SFreeDealer)(nil), "pb.SFreeDealer")
	proto.RegisterType((*CDealerList)(nil), "pb.CDealerList")
	proto.RegisterType((*SDealerList)(nil), "pb.SDealerList")
	proto.RegisterType((*CFreeSit)(nil), "pb.CFreeSit")
	proto.RegisterType((*SFreeSit)(nil), "pb.SFreeSit")
	proto.RegisterType((*CFreeBet)(nil), "pb.CFreeBet")
	proto.RegisterType((*SFreeBet)(nil), "pb.SFreeBet")
	proto.RegisterType((*SFreeGamestart)(nil), "pb.SFreeGamestart")
	proto.RegisterType((*SFreeGameover)(nil), "pb.SFreeGameover")
	proto.RegisterType((*CFreeTrend)(nil), "pb.CFreeTrend")
	proto.RegisterType((*SFreeTrend)(nil), "pb.SFreeTrend")
}
func (this *CEnterFreeRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CEnterFreeRoom)
	if !ok {
		that2, ok := that.(CEnterFreeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SEnterFreeRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SEnterFreeRoom)
	if !ok {
		that2, ok := that.(SEnterFreeRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SFreeCamein) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SFreeCamein)
	if !ok {
		that2, ok := that.(SFreeCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	return true
}
func (this *CFreeDealer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CFreeDealer)
	if !ok {
		that2, ok := that.(CFreeDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	return true
}
func (this *SFreeDealer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SFreeDealer)
	if !ok {
		that2, ok := that.(SFreeDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CDealerList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CDealerList)
	if !ok {
		that2, ok := that.(CDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SDealerList) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDealerList)
	if !ok {
		that2, ok := that.(SDealerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFreeSit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CFreeSit)
	if !ok {
		that2, ok := that.(CFreeSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	return true
}
func (this *SFreeSit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SFreeSit)
	if !ok {
		that2, ok := that.(SFreeSit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CFreeBet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CFreeBet)
	if !ok {
		that2, ok := that.(CFreeBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SFreeBet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SFreeBet)
	if !ok {
		that2, ok := that.(SFreeBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Beseat != that1.Beseat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Bets != that1.Bets {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SFreeGamestart) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SFreeGamestart)
	if !ok {
		that2, ok := that.(SFreeGamestart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Photo != that1.Photo {
		return false
	}
	if this.DealerNum != that1.DealerNum {
		return false
	}
	if this.LeftDealerNum != that1.LeftDealerNum {
		return false
	}
	return true
}
func (this *SFreeGameover) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SFreeGameover)
	if !ok {
		that2, ok := that.(SFreeGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.DealerNum != that1.DealerNum {
		return false
	}
	if this.LeftDealerNum != that1.LeftDealerNum {
		return false
	}
	if this.Coin != that1.Coin {
		return false
	}
	if this.Pond != that1.Pond {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *CFreeTrend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CFreeTrend)
	if !ok {
		that2, ok := that.(CFreeTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SFreeTrend) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SFreeTrend)
	if !ok {
		that2, ok := that.(SFreeTrend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *CEnterFreeRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CEnterFreeRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEnterFreeRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SEnterFreeRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFreeCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFreeCamein{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFreeDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CFreeDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFreeDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SFreeDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CDealerList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDealerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SDealerList{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFreeSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CFreeSit{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFreeSit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SFreeSit{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFreeBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CFreeBet{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFreeBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.SFreeBet{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Beseat: "+fmt.Sprintf("%#v", this.Beseat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Bets: "+fmt.Sprintf("%#v", this.Bets)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFreeGamestart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.SFreeGamestart{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	s = append(s, "DealerNum: "+fmt.Sprintf("%#v", this.DealerNum)+",\n")
	s = append(s, "LeftDealerNum: "+fmt.Sprintf("%#v", this.LeftDealerNum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFreeGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.SFreeGameover{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "DealerNum: "+fmt.Sprintf("%#v", this.DealerNum)+",\n")
	s = append(s, "LeftDealerNum: "+fmt.Sprintf("%#v", this.LeftDealerNum)+",\n")
	s = append(s, "Coin: "+fmt.Sprintf("%#v", this.Coin)+",\n")
	s = append(s, "Pond: "+fmt.Sprintf("%#v", this.Pond)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CFreeTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CFreeTrend{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SFreeTrend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SFreeTrend{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFree(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CEnterFreeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEnterFreeRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SEnterFreeRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEnterFreeRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.Roominfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SFreeCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFreeCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.Userinfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Userinfo.Size()))
		n2, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CFreeDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFreeDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.State))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *SFreeDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFreeDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Coin))
	}
	if m.Error != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SDealerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDealerList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFreeSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFreeSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.State {
		dAtA[i] = 0x10
		i++
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Seat))
	}
	return i, nil
}

func (m *SFreeSit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFreeSit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.State {
		dAtA[i] = 0x10
		i++
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Seat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Seat))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Coin))
	}
	if m.Error != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CFreeBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFreeBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Seat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SFreeBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFreeBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Seat))
	}
	if m.Beseat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Beseat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Value))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Coin))
	}
	if m.Bets != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Bets))
	}
	if m.Error != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SFreeGamestart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFreeGamestart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Coin))
	}
	if len(m.Photo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Photo)))
		i += copy(dAtA[i:], m.Photo)
	}
	if m.DealerNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.LeftDealerNum))
	}
	return i, nil
}

func (m *SFreeGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFreeGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.State))
	}
	if len(m.Dealer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFree(dAtA, i, uint64(len(m.Dealer)))
		i += copy(dAtA[i:], m.Dealer)
	}
	if m.DealerNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.LeftDealerNum))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Coin))
	}
	if m.Pond != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Pond))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x42
			i++
			i = encodeVarintFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CFreeTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CFreeTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SFreeTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SFreeTrend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFree(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Free(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Free(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFree(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEnterFreeRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	return n
}

func (m *SEnterFreeRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovFree(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovFree(uint64(l))
		}
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovFree(uint64(m.Error))
	}
	return n
}

func (m *SFreeCamein) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovFree(uint64(l))
	}
	return n
}

func (m *CFreeDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovFree(uint64(m.State))
	}
	if m.Coin != 0 {
		n += 1 + sovFree(uint64(m.Coin))
	}
	return n
}

func (m *SFreeDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovFree(uint64(m.Coin))
	}
	if m.Error != 0 {
		n += 1 + sovFree(uint64(m.Error))
	}
	return n
}

func (m *CDealerList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	return n
}

func (m *SDealerList) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFree(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovFree(uint64(m.Error))
	}
	return n
}

func (m *CFreeSit) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.State {
		n += 2
	}
	if m.Seat != 0 {
		n += 1 + sovFree(uint64(m.Seat))
	}
	return n
}

func (m *SFreeSit) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.State {
		n += 2
	}
	if m.Seat != 0 {
		n += 1 + sovFree(uint64(m.Seat))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovFree(uint64(m.Coin))
	}
	if m.Error != 0 {
		n += 1 + sovFree(uint64(m.Error))
	}
	return n
}

func (m *CFreeBet) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovFree(uint64(m.Seat))
	}
	if m.Value != 0 {
		n += 1 + sovFree(uint64(m.Value))
	}
	return n
}

func (m *SFreeBet) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovFree(uint64(m.Seat))
	}
	if m.Beseat != 0 {
		n += 1 + sovFree(uint64(m.Beseat))
	}
	if m.Value != 0 {
		n += 1 + sovFree(uint64(m.Value))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovFree(uint64(m.Coin))
	}
	if m.Bets != 0 {
		n += 1 + sovFree(uint64(m.Bets))
	}
	if m.Error != 0 {
		n += 1 + sovFree(uint64(m.Error))
	}
	return n
}

func (m *SFreeGamestart) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	if m.Coin != 0 {
		n += 1 + sovFree(uint64(m.Coin))
	}
	l = len(m.Photo)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	if m.DealerNum != 0 {
		n += 1 + sovFree(uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		n += 1 + sovFree(uint64(m.LeftDealerNum))
	}
	return n
}

func (m *SFreeGameover) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if m.State != 0 {
		n += 1 + sovFree(uint64(m.State))
	}
	l = len(m.Dealer)
	if l > 0 {
		n += 1 + l + sovFree(uint64(l))
	}
	if m.DealerNum != 0 {
		n += 1 + sovFree(uint64(m.DealerNum))
	}
	if m.LeftDealerNum != 0 {
		n += 1 + sovFree(uint64(m.LeftDealerNum))
	}
	if m.Coin != 0 {
		n += 1 + sovFree(uint64(m.Coin))
	}
	if m.Pond != 0 {
		n += 1 + sovFree(uint64(m.Pond))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovFree(uint64(l))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFree(uint64(l))
		}
	}
	return n
}

func (m *CFreeTrend) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	return n
}

func (m *SFreeTrend) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFree(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFree(uint64(l))
		}
	}
	return n
}

func sovFree(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFree(x uint64) (n int) {
	return sovFree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CEnterFreeRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEnterFreeRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEnterFreeRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEnterFreeRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "FreeRoom", "FreeRoom", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "FreeUser", "FreeUser", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "RoomBets", "RoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFreeCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFreeCamein{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "FreeUser", "FreeUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFreeDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFreeDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFreeDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFreeDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDealerList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDealerList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDealerList{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "DealerList", "DealerList", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFreeSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFreeSit{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFreeSit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFreeSit{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFreeBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFreeBet{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFreeBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFreeBet{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Beseat:` + fmt.Sprintf("%v", this.Beseat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Bets:` + fmt.Sprintf("%v", this.Bets) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFreeGamestart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFreeGamestart{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Photo:` + fmt.Sprintf("%v", this.Photo) + `,`,
		`DealerNum:` + fmt.Sprintf("%v", this.DealerNum) + `,`,
		`LeftDealerNum:` + fmt.Sprintf("%v", this.LeftDealerNum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFreeGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFreeGameover{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`DealerNum:` + fmt.Sprintf("%v", this.DealerNum) + `,`,
		`LeftDealerNum:` + fmt.Sprintf("%v", this.LeftDealerNum) + `,`,
		`Coin:` + fmt.Sprintf("%v", this.Coin) + `,`,
		`Pond:` + fmt.Sprintf("%v", this.Pond) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "FreeRoomOver", "FreeRoomOver", 1) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "RoomScore", "RoomScore", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CFreeTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CFreeTrend{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SFreeTrend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SFreeTrend{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "FreeTrendList", "FreeTrendList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFree(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CEnterFreeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEnterFreeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEnterFreeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEnterFreeRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEnterFreeRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEnterFreeRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &FreeRoom{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &FreeUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &RoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFreeCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFreeCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFreeCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &FreeUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFreeDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFreeDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFreeDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFreeDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFreeDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFreeDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDealerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDealerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDealerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DealerList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFreeSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFreeSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFreeSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFreeSit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFreeSit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFreeSit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFreeBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFreeBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFreeBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFreeBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFreeBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFreeBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beseat", wireType)
			}
			m.Beseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Beseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bets", wireType)
			}
			m.Bets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bets |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFreeGamestart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFreeGamestart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFreeGamestart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Photo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerNum", wireType)
			}
			m.DealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDealerNum", wireType)
			}
			m.LeftDealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFreeGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFreeGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFreeGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dealer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealerNum", wireType)
			}
			m.DealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftDealerNum", wireType)
			}
			m.LeftDealerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftDealerNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pond", wireType)
			}
			m.Pond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pond |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &FreeRoomOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoomScore{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CFreeTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CFreeTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CFreeTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SFreeTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SFreeTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SFreeTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FreeTrendList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFree
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFree
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFree(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFree = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFree   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("free.proto", fileDescriptorFree) }

var fileDescriptorFree = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x26, 0x76, 0xea, 0x4c, 0x48, 0x04, 0xab, 0xaa, 0xb2, 0x2a, 0x64, 0xa5, 0x56, 0x91,
	0x72, 0x40, 0x3d, 0x94, 0x37, 0x68, 0x5a, 0x8a, 0x04, 0x02, 0xc9, 0x86, 0x07, 0x70, 0xea, 0xa9,
	0x6a, 0x11, 0x7b, 0xa3, 0xf5, 0x36, 0x67, 0x4e, 0x9c, 0x79, 0x0c, 0x9e, 0x81, 0x13, 0x12, 0x42,
	0x82, 0x5b, 0x8f, 0x1c, 0xa9, 0xb9, 0x70, 0xec, 0x23, 0xa0, 0xdd, 0xf5, 0x5f, 0x90, 0xd3, 0x50,
	0x94, 0xdb, 0xce, 0xce, 0xb7, 0xb3, 0xdf, 0x7c, 0xdf, 0x7a, 0x0c, 0x70, 0xce, 0x11, 0x0f, 0xe6,
	0x9c, 0x09, 0x46, 0xdb, 0xf3, 0xe9, 0xae, 0xb5, 0x60, 0x3a, 0xda, 0x85, 0x33, 0x16, 0xe6, 0x19,
	0x77, 0x1f, 0x86, 0x93, 0x93, 0x44, 0x20, 0x7f, 0xca, 0x11, 0x3d, 0xc6, 0x62, 0x4a, 0xc1, 0x90,
	0x79, 0x9b, 0x8c, 0xc8, 0x78, 0xe0, 0xa9, 0xb5, 0xfb, 0x95, 0xc0, 0xd0, 0x5f, 0x0b, 0xa3, 0x63,
	0xb0, 0x38, 0x63, 0x71, 0x94, 0x9c, 0x33, 0xbb, 0x3d, 0x22, 0xe3, 0xfe, 0xe1, 0xbd, 0x83, 0xf9,
	0xf4, 0xa0, 0x38, 0xe3, 0x95, 0x59, 0x89, 0xbc, 0x4c, 0x91, 0x2b, 0x64, 0x67, 0xd4, 0xa9, 0x23,
	0xdf, 0xa4, 0xc8, 0xbd, 0x32, 0x2b, 0x91, 0x53, 0x14, 0xa9, 0x42, 0x9a, 0x15, 0x52, 0xd6, 0x3b,
	0x42, 0x91, 0x7a, 0x65, 0x96, 0xee, 0x81, 0x89, 0x9c, 0x33, 0x6e, 0x77, 0x47, 0x64, 0x3c, 0x3c,
	0xec, 0x4b, 0xd8, 0x09, 0xe7, 0x13, 0x16, 0xa2, 0xa7, 0x33, 0xee, 0x73, 0xe8, 0xfb, 0xf2, 0x8e,
	0x49, 0x10, 0x63, 0x94, 0xac, 0xea, 0xa1, 0x64, 0xf6, 0x57, 0x0f, 0xcb, 0xcc, 0x64, 0xb1, 0x89,
	0xdc, 0x3e, 0xc6, 0x60, 0x86, 0xbc, 0xb1, 0xd8, 0x36, 0x98, 0xa9, 0x08, 0x04, 0xaa, 0x4a, 0x03,
	0x4f, 0x07, 0x1a, 0x19, 0x25, 0x76, 0xa7, 0x40, 0x46, 0x89, 0xfb, 0x89, 0xe4, 0xd4, 0xee, 0x5c,
	0x6d, 0x07, 0xba, 0xa1, 0x3a, 0xa3, 0xea, 0xf5, 0xbc, 0x3c, 0x92, 0xfb, 0x8a, 0x6a, 0x68, 0x1b,
	0x7a, 0x5f, 0x47, 0x74, 0x17, 0xac, 0x24, 0x3a, 0x7b, 0x9b, 0x04, 0x31, 0xda, 0xa6, 0xca, 0x94,
	0x71, 0xc9, 0xac, 0x5b, 0x31, 0xab, 0x64, 0xdd, 0x5a, 0x29, 0xeb, 0x1e, 0xf4, 0x27, 0x9a, 0xf7,
	0x8b, 0x28, 0x15, 0x8d, 0x2f, 0xe8, 0x02, 0xfa, 0xfe, 0xed, 0x10, 0xea, 0x82, 0x31, 0x8b, 0x52,
	0x61, 0xb7, 0x95, 0xcb, 0x43, 0x79, 0x4f, 0x75, 0xc2, 0x53, 0xb9, 0x8a, 0x4c, 0x67, 0x25, 0x99,
	0x67, 0x60, 0x29, 0x5b, 0xfc, 0x48, 0xac, 0x57, 0xd1, 0xaa, 0x79, 0x92, 0x62, 0x20, 0x0a, 0x4f,
	0xe4, 0xda, 0xfd, 0x4e, 0xc0, 0xf2, 0x37, 0x52, 0xea, 0xbf, 0xcc, 0xd8, 0x06, 0x73, 0x7e, 0xc1,
	0x04, 0x53, 0x6e, 0xf4, 0x3c, 0x1d, 0x94, 0x16, 0x6d, 0x35, 0x59, 0x64, 0xad, 0x55, 0xe5, 0x08,
	0x9b, 0x5b, 0x29, 0x48, 0xb7, 0x6b, 0xa4, 0xb7, 0xc1, 0x5c, 0x04, 0xb3, 0x4b, 0xcc, 0x3b, 0xd1,
	0x81, 0xfb, 0xa5, 0x50, 0xe5, 0x2e, 0xa5, 0x76, 0xa0, 0x3b, 0xc5, 0x9a, 0x2a, 0x79, 0x54, 0x5d,
	0x61, 0xd4, 0xae, 0xa8, 0xa9, 0x65, 0x2e, 0xa9, 0xd5, 0xf4, 0x3c, 0x29, 0x18, 0x72, 0x02, 0x14,
	0x7a, 0xc8, 0xf5, 0xbf, 0xe8, 0xf1, 0x59, 0x4e, 0x34, 0xd9, 0xc5, 0x69, 0x10, 0x63, 0x2a, 0x02,
	0x2e, 0x36, 0xf0, 0xc9, 0x15, 0xfc, 0x8c, 0x1a, 0xbf, 0xd2, 0x45, 0xb3, 0xee, 0xe2, 0x43, 0xe8,
	0xe9, 0x33, 0x2f, 0x2f, 0xe3, 0xbc, 0x9d, 0x6a, 0x83, 0xee, 0xc3, 0x60, 0x86, 0xe7, 0xe2, 0xb8,
	0x44, 0xe8, 0xe6, 0x96, 0x37, 0xdd, 0xf7, 0x6d, 0x18, 0x94, 0x2d, 0xb0, 0xc5, 0x46, 0x86, 0xc6,
	0x12, 0x2f, 0x63, 0x2d, 0x2f, 0xb3, 0x81, 0xd7, 0x2a, 0x97, 0xe6, 0x2c, 0x09, 0x0b, 0x97, 0xe4,
	0x9a, 0xee, 0x83, 0x11, 0x06, 0x22, 0xb0, 0x2d, 0xf5, 0xbd, 0xdf, 0xaf, 0xff, 0x29, 0x5e, 0x2d,
	0x90, 0x7b, 0x2a, 0x4b, 0xf7, 0xf2, 0xa9, 0xd0, 0x53, 0xa8, 0x41, 0x31, 0xfb, 0xfd, 0x33, 0xc6,
	0x51, 0x0f, 0x05, 0x77, 0x04, 0xa0, 0xde, 0xf6, 0x6b, 0x8e, 0x49, 0xd8, 0x38, 0x7d, 0x4e, 0x01,
	0xfc, 0x5b, 0x11, 0xf4, 0xd1, 0xd2, 0xf0, 0x79, 0x50, 0x90, 0x51, 0x07, 0xaa, 0xf9, 0x73, 0xf4,
	0xf8, 0xea, 0xda, 0x69, 0xfd, 0xb8, 0x76, 0x5a, 0x37, 0xd7, 0x0e, 0x79, 0x97, 0x39, 0xe4, 0x63,
	0xe6, 0x90, 0x6f, 0x99, 0x43, 0xae, 0x32, 0x87, 0xfc, 0xcc, 0x1c, 0xf2, 0x3b, 0x73, 0x5a, 0x37,
	0x99, 0x43, 0x3e, 0xfc, 0x72, 0x5a, 0xd3, 0xae, 0xfa, 0xc7, 0x3e, 0xf9, 0x13, 0x00, 0x00, 0xff,
	0xff, 0xb5, 0x72, 0xd9, 0x85, 0x8b, 0x07, 0x00, 0x00,
}
