// Code generated by protoc-gen-gogo.
// source: desk.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import actor "github.com/AsynkronIT/protoactor-go/actor"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 匹配桌子
type MatchDesk struct {
	Rtype uint32 `protobuf:"varint,1,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *MatchDesk) Reset()                    { *m = MatchDesk{} }
func (*MatchDesk) ProtoMessage()               {}
func (*MatchDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{0} }

func (m *MatchDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *MatchDesk) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MatchedDesk struct {
	Desk *actor.PID `protobuf:"bytes,1,opt,name=Desk" json:"Desk,omitempty"`
	Node *actor.PID `protobuf:"bytes,2,opt,name=Node" json:"Node,omitempty"`
}

func (m *MatchedDesk) Reset()                    { *m = MatchedDesk{} }
func (*MatchedDesk) ProtoMessage()               {}
func (*MatchedDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{1} }

func (m *MatchedDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *MatchedDesk) GetNode() *actor.PID {
	if m != nil {
		return m.Node
	}
	return nil
}

// 创建桌子
type CreateDesk struct {
	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *CreateDesk) Reset()                    { *m = CreateDesk{} }
func (*CreateDesk) ProtoMessage()               {}
func (*CreateDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{2} }

func (m *CreateDesk) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type CreatedDesk struct {
	Data  string  `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Error ErrCode `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *CreatedDesk) Reset()                    { *m = CreatedDesk{} }
func (*CreatedDesk) ProtoMessage()               {}
func (*CreatedDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{3} }

func (m *CreatedDesk) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *CreatedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 创建桌子进程
type SpawnDesk struct {
	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *SpawnDesk) Reset()                    { *m = SpawnDesk{} }
func (*SpawnDesk) ProtoMessage()               {}
func (*SpawnDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{4} }

func (m *SpawnDesk) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type SpawnedDesk struct {
	Desk  *actor.PID `protobuf:"bytes,1,opt,name=Desk" json:"Desk,omitempty"`
	Error ErrCode    `protobuf:"varint,2,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SpawnedDesk) Reset()                    { *m = SpawnedDesk{} }
func (*SpawnedDesk) ProtoMessage()               {}
func (*SpawnedDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{5} }

func (m *SpawnedDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *SpawnedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 创建桌子进程
type AddDesk struct {
	Desk   *actor.PID `protobuf:"bytes,1,opt,name=Desk" json:"Desk,omitempty"`
	Roomid string     `protobuf:"bytes,2,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32     `protobuf:"varint,3,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
}

func (m *AddDesk) Reset()                    { *m = AddDesk{} }
func (*AddDesk) ProtoMessage()               {}
func (*AddDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{6} }

func (m *AddDesk) GetDesk() *actor.PID {
	if m != nil {
		return m.Desk
	}
	return nil
}

func (m *AddDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *AddDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

type AddedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *AddedDesk) Reset()                    { *m = AddedDesk{} }
func (*AddedDesk) ProtoMessage()               {}
func (*AddedDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{7} }

func (m *AddedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 关闭桌子进程
type CloseDesk struct {
	Roomid string `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32 `protobuf:"varint,2,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Code   string `protobuf:"bytes,3,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (m *CloseDesk) Reset()                    { *m = CloseDesk{} }
func (*CloseDesk) ProtoMessage()               {}
func (*CloseDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{8} }

func (m *CloseDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *CloseDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CloseDesk) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type ClosedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *ClosedDesk) Reset()                    { *m = ClosedDesk{} }
func (*ClosedDesk) ProtoMessage()               {}
func (*ClosedDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{9} }

func (m *ClosedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 进入房间
type EnterDesk struct {
	Data string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *EnterDesk) Reset()                    { *m = EnterDesk{} }
func (*EnterDesk) ProtoMessage()               {}
func (*EnterDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{10} }

func (m *EnterDesk) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type EnteredDesk struct {
	Roomid string  `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32  `protobuf:"varint,2,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Userid string  `protobuf:"bytes,3,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Error  ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *EnteredDesk) Reset()                    { *m = EnteredDesk{} }
func (*EnteredDesk) ProtoMessage()               {}
func (*EnteredDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{11} }

func (m *EnteredDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *EnteredDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *EnteredDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *EnteredDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 加入桌子
type JoinDesk struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Roomid string     `protobuf:"bytes,2,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Rtype  uint32     `protobuf:"varint,3,opt,name=Rtype,proto3" json:"Rtype,omitempty"`
	Userid string     `protobuf:"bytes,4,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *JoinDesk) Reset()                    { *m = JoinDesk{} }
func (*JoinDesk) ProtoMessage()               {}
func (*JoinDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{12} }

func (m *JoinDesk) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *JoinDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *JoinDesk) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *JoinDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type JoinedDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *JoinedDesk) Reset()                    { *m = JoinedDesk{} }
func (*JoinedDesk) ProtoMessage()               {}
func (*JoinedDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{13} }

func (m *JoinedDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 离开房间
type LeaveDesk struct {
	Roomid string `protobuf:"bytes,1,opt,name=Roomid,proto3" json:"Roomid,omitempty"`
	Userid string `protobuf:"bytes,2,opt,name=Userid,proto3" json:"Userid,omitempty"`
}

func (m *LeaveDesk) Reset()                    { *m = LeaveDesk{} }
func (*LeaveDesk) ProtoMessage()               {}
func (*LeaveDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{14} }

func (m *LeaveDesk) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *LeaveDesk) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

type LeftDesk struct {
	Error ErrCode `protobuf:"varint,1,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *LeftDesk) Reset()                    { *m = LeftDesk{} }
func (*LeftDesk) ProtoMessage()               {}
func (*LeftDesk) Descriptor() ([]byte, []int) { return fileDescriptorDesk, []int{15} }

func (m *LeftDesk) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

func init() {
	proto.RegisterType((*MatchDesk)(nil), "pb.MatchDesk")
	proto.RegisterType((*MatchedDesk)(nil), "pb.MatchedDesk")
	proto.RegisterType((*CreateDesk)(nil), "pb.CreateDesk")
	proto.RegisterType((*CreatedDesk)(nil), "pb.CreatedDesk")
	proto.RegisterType((*SpawnDesk)(nil), "pb.SpawnDesk")
	proto.RegisterType((*SpawnedDesk)(nil), "pb.SpawnedDesk")
	proto.RegisterType((*AddDesk)(nil), "pb.AddDesk")
	proto.RegisterType((*AddedDesk)(nil), "pb.AddedDesk")
	proto.RegisterType((*CloseDesk)(nil), "pb.CloseDesk")
	proto.RegisterType((*ClosedDesk)(nil), "pb.ClosedDesk")
	proto.RegisterType((*EnterDesk)(nil), "pb.EnterDesk")
	proto.RegisterType((*EnteredDesk)(nil), "pb.EnteredDesk")
	proto.RegisterType((*JoinDesk)(nil), "pb.JoinDesk")
	proto.RegisterType((*JoinedDesk)(nil), "pb.JoinedDesk")
	proto.RegisterType((*LeaveDesk)(nil), "pb.LeaveDesk")
	proto.RegisterType((*LeftDesk)(nil), "pb.LeftDesk")
}
func (this *MatchDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MatchDesk)
	if !ok {
		that2, ok := that.(MatchDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *MatchedDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MatchedDesk)
	if !ok {
		that2, ok := that.(MatchedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if !this.Node.Equal(that1.Node) {
		return false
	}
	return true
}
func (this *CreateDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreateDesk)
	if !ok {
		that2, ok := that.(CreateDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *CreatedDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CreatedDesk)
	if !ok {
		that2, ok := that.(CreatedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SpawnDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpawnDesk)
	if !ok {
		that2, ok := that.(SpawnDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *SpawnedDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SpawnedDesk)
	if !ok {
		that2, ok := that.(SpawnedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AddDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddDesk)
	if !ok {
		that2, ok := that.(AddDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Desk.Equal(that1.Desk) {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	return true
}
func (this *AddedDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AddedDesk)
	if !ok {
		that2, ok := that.(AddedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CloseDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CloseDesk)
	if !ok {
		that2, ok := that.(CloseDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *ClosedDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClosedDesk)
	if !ok {
		that2, ok := that.(ClosedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *EnterDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnterDesk)
	if !ok {
		that2, ok := that.(EnterDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	return true
}
func (this *EnteredDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*EnteredDesk)
	if !ok {
		that2, ok := that.(EnteredDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *JoinDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinDesk)
	if !ok {
		that2, ok := that.(JoinDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *JoinedDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinedDesk)
	if !ok {
		that2, ok := that.(JoinedDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *LeaveDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LeaveDesk)
	if !ok {
		that2, ok := that.(LeaveDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Roomid != that1.Roomid {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	return true
}
func (this *LeftDesk) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LeftDesk)
	if !ok {
		that2, ok := that.(LeftDesk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *MatchDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MatchDesk{")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatchedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MatchedDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	if this.Node != nil {
		s = append(s, "Node: "+fmt.Sprintf("%#v", this.Node)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateDesk{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreatedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreatedDesk{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpawnDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SpawnDesk{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpawnedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SpawnedDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AddDesk{")
	if this.Desk != nil {
		s = append(s, "Desk: "+fmt.Sprintf("%#v", this.Desk)+",\n")
	}
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AddedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CloseDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClosedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ClosedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnterDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EnterDesk{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnteredDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.EnteredDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.JoinDesk{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinedDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.JoinedDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LeaveDesk{")
	s = append(s, "Roomid: "+fmt.Sprintf("%#v", this.Roomid)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeftDesk) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LeftDesk{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDesk(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MatchDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rtype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *MatchedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Desk.Size()))
		n1, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Node != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Node.Size()))
		n2, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CreateDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *CreatedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SpawnDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpawnDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *SpawnedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpawnedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Desk.Size()))
		n3, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *AddDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Desk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Desk.Size()))
		n4, err := m.Desk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Rtype))
	}
	return i, nil
}

func (m *AddedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CloseDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *ClosedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClosedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *EnterDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *EnteredDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnteredDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *JoinDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Sender.Size()))
		n5, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Roomid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Rtype))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *JoinedDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinedDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *LeaveDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDesk(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	return i, nil
}

func (m *LeftDesk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeftDesk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDesk(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func encodeFixed64Desk(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Desk(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDesk(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MatchDesk) Size() (n int) {
	var l int
	_ = l
	if m.Rtype != 0 {
		n += 1 + sovDesk(uint64(m.Rtype))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *MatchedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *CreateDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *CreatedDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovDesk(uint64(m.Error))
	}
	return n
}

func (m *SpawnDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *SpawnedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovDesk(uint64(m.Error))
	}
	return n
}

func (m *AddDesk) Size() (n int) {
	var l int
	_ = l
	if m.Desk != nil {
		l = m.Desk.Size()
		n += 1 + l + sovDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovDesk(uint64(m.Rtype))
	}
	return n
}

func (m *AddedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovDesk(uint64(m.Error))
	}
	return n
}

func (m *CloseDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovDesk(uint64(m.Rtype))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *ClosedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovDesk(uint64(m.Error))
	}
	return n
}

func (m *EnterDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *EnteredDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovDesk(uint64(m.Rtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovDesk(uint64(m.Error))
	}
	return n
}

func (m *JoinDesk) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovDesk(uint64(l))
	}
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovDesk(uint64(m.Rtype))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *JoinedDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovDesk(uint64(m.Error))
	}
	return n
}

func (m *LeaveDesk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovDesk(uint64(l))
	}
	return n
}

func (m *LeftDesk) Size() (n int) {
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovDesk(uint64(m.Error))
	}
	return n
}

func sovDesk(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDesk(x uint64) (n int) {
	return sovDesk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MatchDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchDesk{`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchedDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Node:` + strings.Replace(fmt.Sprintf("%v", this.Node), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateDesk{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatedDesk{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpawnDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpawnDesk{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpawnedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpawnedDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddDesk{`,
		`Desk:` + strings.Replace(fmt.Sprintf("%v", this.Desk), "PID", "actor.PID", 1) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClosedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClosedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnterDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnterDesk{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnteredDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnteredDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinDesk{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinedDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinedDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaveDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveDesk{`,
		`Roomid:` + fmt.Sprintf("%v", this.Roomid) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeftDesk) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeftDesk{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDesk(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MatchDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &actor.PID{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpawnDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpawnDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpawnDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpawnedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpawnedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpawnedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desk == nil {
				m.Desk = &actor.PID{}
			}
			if err := m.Desk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClosedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClosedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClosedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnteredDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnteredDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnteredDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinedDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinedDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinedDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDesk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeftDesk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeftDesk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeftDesk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDesk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDesk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDesk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDesk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDesk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDesk
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDesk
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDesk(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDesk = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDesk   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("desk.proto", fileDescriptorDesk) }

var fileDescriptorDesk = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xb1, 0x6e, 0x13, 0x41,
	0x10, 0x86, 0xbd, 0xe6, 0x62, 0xb2, 0x73, 0x82, 0xe2, 0x84, 0xa2, 0x28, 0xc5, 0xc6, 0x5c, 0x95,
	0x82, 0x9c, 0xa5, 0x20, 0x68, 0xa8, 0x8c, 0x9d, 0x22, 0x28, 0x8e, 0xa2, 0x0d, 0x88, 0x7a, 0xed,
	0x1d, 0x12, 0xcb, 0xf8, 0xf6, 0xb4, 0xb7, 0x04, 0xa5, 0xe3, 0x11, 0x78, 0x0c, 0x1e, 0x85, 0x32,
	0x25, 0x25, 0x3e, 0x1a, 0xca, 0x3c, 0x02, 0xba, 0xd9, 0x03, 0x1b, 0x2b, 0x17, 0x5d, 0x2a, 0xcf,
	0xee, 0xcc, 0xfc, 0xdf, 0xef, 0x99, 0xd5, 0x01, 0x68, 0xcc, 0x67, 0x49, 0x66, 0x8d, 0x33, 0x51,
	0x3b, 0x1b, 0xef, 0xbc, 0x3c, 0x9f, 0xba, 0x8b, 0x4f, 0xe3, 0x64, 0x62, 0xe6, 0xbd, 0x7e, 0x7e,
	0x95, 0xce, 0xac, 0x49, 0x8f, 0xde, 0xf6, 0xa8, 0x40, 0x4d, 0x9c, 0xb1, 0xfb, 0xe7, 0xa6, 0x47,
	0x81, 0xbf, 0xcb, 0x7d, 0xef, 0x0e, 0x4c, 0x8c, 0x46, 0x1f, 0xc7, 0x2f, 0x80, 0x8f, 0x94, 0x9b,
	0x5c, 0x0c, 0x31, 0x9f, 0x45, 0x4f, 0x60, 0x43, 0xba, 0xab, 0x0c, 0xb7, 0x59, 0x97, 0xed, 0x3d,
	0x92, 0xfe, 0x10, 0x45, 0x10, 0x9c, 0xa8, 0x39, 0x6e, 0xb7, 0xbb, 0x6c, 0x8f, 0x4b, 0x8a, 0xe3,
	0x11, 0x84, 0xd4, 0x86, 0x9a, 0x1a, 0x05, 0x04, 0xe5, 0x2f, 0xf5, 0x85, 0x07, 0x90, 0x10, 0x34,
	0x39, 0x3d, 0x1a, 0xca, 0xe0, 0x6f, 0xfe, 0xc4, 0x68, 0x2f, 0xb1, 0x96, 0x2f, 0xef, 0xe3, 0x2e,
	0xc0, 0xc0, 0xa2, 0x72, 0x48, 0xd5, 0x11, 0x04, 0x43, 0xe5, 0x14, 0xa9, 0x71, 0x49, 0x71, 0x3c,
	0x84, 0xd0, 0x57, 0xe8, 0xba, 0x92, 0xe8, 0x29, 0x6c, 0xa0, 0xb5, 0xc6, 0x12, 0xe5, 0xf1, 0x41,
	0x98, 0x64, 0xe3, 0xe4, 0xd0, 0xda, 0x81, 0xd1, 0x28, 0x7d, 0x26, 0xde, 0x05, 0x7e, 0x96, 0xa9,
	0xcf, 0x69, 0x2d, 0xe6, 0x14, 0x42, 0x2a, 0x68, 0xf8, 0xbf, 0x1a, 0x20, 0xdf, 0xc3, 0xc3, 0xbe,
	0x6e, 0xa6, 0xb6, 0x05, 0x1d, 0x69, 0xcc, 0x7c, 0xaa, 0xab, 0x51, 0x57, 0xa7, 0xe5, 0x5a, 0x1e,
	0xac, 0xac, 0x25, 0x4e, 0x80, 0xf7, 0xb5, 0xae, 0x8c, 0xfe, 0x33, 0xc2, 0x6a, 0x8d, 0x8c, 0x80,
	0x0f, 0x3e, 0x9a, 0x1c, 0xd7, 0x50, 0xec, 0x76, 0x54, 0x7b, 0xed, 0x05, 0x94, 0x4a, 0xc4, 0xe7,
	0x92, 0xe2, 0xb8, 0x07, 0x40, 0x72, 0x8d, 0xf9, 0xbb, 0xc0, 0x0f, 0x53, 0x87, 0xb6, 0x76, 0xf6,
	0x97, 0x10, 0x52, 0x41, 0x25, 0x79, 0x3f, 0x8b, 0x5b, 0xd0, 0x79, 0x97, 0xa3, 0x9d, 0xea, 0xca,
	0x64, 0x75, 0x5a, 0x1a, 0x0b, 0x6a, 0x8d, 0x39, 0xd8, 0x7c, 0x63, 0xa6, 0xfe, 0x4d, 0xc4, 0xd0,
	0x39, 0xc3, 0x54, 0xa3, 0xbd, 0x65, 0x49, 0x55, 0xe6, 0x7e, 0x6b, 0x5a, 0x31, 0x16, 0xac, 0x1a,
	0x2b, 0xe7, 0x57, 0x52, 0x9b, 0xcf, 0xef, 0x15, 0xf0, 0x63, 0x54, 0x97, 0x77, 0xef, 0x6f, 0x49,
	0x6b, 0xff, 0x47, 0xdb, 0x87, 0xcd, 0x63, 0xfc, 0xe0, 0x1a, 0xb2, 0x5e, 0x3f, 0xbb, 0x5e, 0x88,
	0xd6, 0x8f, 0x85, 0x68, 0xdd, 0x2c, 0x04, 0xfb, 0x52, 0x08, 0xf6, 0xad, 0x10, 0xec, 0x7b, 0x21,
	0xd8, 0x75, 0x21, 0xd8, 0xcf, 0x42, 0xb0, 0xdf, 0x85, 0x68, 0xdd, 0x14, 0x82, 0x7d, 0xfd, 0x25,
	0x5a, 0xe3, 0x0e, 0x7d, 0x4a, 0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xe4, 0xda, 0x42,
	0xa0, 0x04, 0x00, 0x00,
}
