// Code generated by protoc-gen-gogo.
// source: buy.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 商城
type CBuy struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CBuy) Reset()                    { *m = CBuy{} }
func (*CBuy) ProtoMessage()               {}
func (*CBuy) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{0} }

func (m *CBuy) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CBuy) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SBuy struct {
	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Result uint32  `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Error  ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SBuy) Reset()                    { *m = SBuy{} }
func (*SBuy) ProtoMessage()               {}
func (*SBuy) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{1} }

func (m *SBuy) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SBuy) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SBuy) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 微信支付 - 下单
type CWxpayOrder struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Body string `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *CWxpayOrder) Reset()                    { *m = CWxpayOrder{} }
func (*CWxpayOrder) ProtoMessage()               {}
func (*CWxpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{2} }

func (m *CWxpayOrder) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CWxpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CWxpayOrder) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type SWxpayOrder struct {
	Code    uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id      uint32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Payreq  string  `protobuf:"bytes,3,opt,name=payreq,proto3" json:"payreq,omitempty"`
	Orderid string  `protobuf:"bytes,4,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Error   ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SWxpayOrder) Reset()                    { *m = SWxpayOrder{} }
func (*SWxpayOrder) ProtoMessage()               {}
func (*SWxpayOrder) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{3} }

func (m *SWxpayOrder) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SWxpayOrder) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SWxpayOrder) GetPayreq() string {
	if m != nil {
		return m.Payreq
	}
	return ""
}

func (m *SWxpayOrder) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SWxpayOrder) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 微信支付 - 查询
type CWxpayQuery struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Transid string `protobuf:"bytes,2,opt,name=transid,proto3" json:"transid,omitempty"`
}

func (m *CWxpayQuery) Reset()                    { *m = CWxpayQuery{} }
func (*CWxpayQuery) ProtoMessage()               {}
func (*CWxpayQuery) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{4} }

func (m *CWxpayQuery) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CWxpayQuery) GetTransid() string {
	if m != nil {
		return m.Transid
	}
	return ""
}

type SWxpayQuery struct {
	Code    uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Orderid string  `protobuf:"bytes,2,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Result  uint32  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Error   ErrCode `protobuf:"varint,4,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SWxpayQuery) Reset()                    { *m = SWxpayQuery{} }
func (*SWxpayQuery) ProtoMessage()               {}
func (*SWxpayQuery) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{5} }

func (m *SWxpayQuery) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SWxpayQuery) GetOrderid() string {
	if m != nil {
		return m.Orderid
	}
	return ""
}

func (m *SWxpayQuery) GetResult() uint32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *SWxpayQuery) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

//  苹果支付
type CApplePay struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id      uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Receipt string `protobuf:"bytes,3,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (m *CApplePay) Reset()                    { *m = CApplePay{} }
func (*CApplePay) ProtoMessage()               {}
func (*CApplePay) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{6} }

func (m *CApplePay) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CApplePay) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CApplePay) GetReceipt() string {
	if m != nil {
		return m.Receipt
	}
	return ""
}

type SApplePay struct {
	Code  uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Id    uint32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Error ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SApplePay) Reset()                    { *m = SApplePay{} }
func (*SApplePay) ProtoMessage()               {}
func (*SApplePay) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{7} }

func (m *SApplePay) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SApplePay) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SApplePay) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 商城
type CShop struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CShop) Reset()                    { *m = CShop{} }
func (*CShop) ProtoMessage()               {}
func (*CShop) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{8} }

func (m *CShop) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SShop struct {
	Code  uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*Shop `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SShop) Reset()                    { *m = SShop{} }
func (*SShop) ProtoMessage()               {}
func (*SShop) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{9} }

func (m *SShop) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SShop) GetList() []*Shop {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SShop) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 商品
type Shop struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Propid uint32 `protobuf:"varint,3,opt,name=propid,proto3" json:"propid,omitempty"`
	Payway uint32 `protobuf:"varint,4,opt,name=payway,proto3" json:"payway,omitempty"`
	Number uint32 `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	Price  uint32 `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	Name   string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Info   string `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *Shop) Reset()                    { *m = Shop{} }
func (*Shop) ProtoMessage()               {}
func (*Shop) Descriptor() ([]byte, []int) { return fileDescriptorBuy, []int{10} }

func (m *Shop) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Shop) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Shop) GetPropid() uint32 {
	if m != nil {
		return m.Propid
	}
	return 0
}

func (m *Shop) GetPayway() uint32 {
	if m != nil {
		return m.Payway
	}
	return 0
}

func (m *Shop) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Shop) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Shop) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Shop) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func init() {
	proto.RegisterType((*CBuy)(nil), "pb.CBuy")
	proto.RegisterType((*SBuy)(nil), "pb.SBuy")
	proto.RegisterType((*CWxpayOrder)(nil), "pb.CWxpayOrder")
	proto.RegisterType((*SWxpayOrder)(nil), "pb.SWxpayOrder")
	proto.RegisterType((*CWxpayQuery)(nil), "pb.CWxpayQuery")
	proto.RegisterType((*SWxpayQuery)(nil), "pb.SWxpayQuery")
	proto.RegisterType((*CApplePay)(nil), "pb.CApplePay")
	proto.RegisterType((*SApplePay)(nil), "pb.SApplePay")
	proto.RegisterType((*CShop)(nil), "pb.CShop")
	proto.RegisterType((*SShop)(nil), "pb.SShop")
	proto.RegisterType((*Shop)(nil), "pb.Shop")
}
func (this *CBuy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CBuy)
	if !ok {
		that2, ok := that.(CBuy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *SBuy) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SBuy)
	if !ok {
		that2, ok := that.(SBuy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CWxpayOrder) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CWxpayOrder)
	if !ok {
		that2, ok := that.(CWxpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	return true
}
func (this *SWxpayOrder) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SWxpayOrder)
	if !ok {
		that2, ok := that.(SWxpayOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Payreq != that1.Payreq {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CWxpayQuery) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CWxpayQuery)
	if !ok {
		that2, ok := that.(CWxpayQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Transid != that1.Transid {
		return false
	}
	return true
}
func (this *SWxpayQuery) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SWxpayQuery)
	if !ok {
		that2, ok := that.(SWxpayQuery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Orderid != that1.Orderid {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CApplePay) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CApplePay)
	if !ok {
		that2, ok := that.(CApplePay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Receipt != that1.Receipt {
		return false
	}
	return true
}
func (this *SApplePay) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SApplePay)
	if !ok {
		that2, ok := that.(SApplePay)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CShop) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CShop)
	if !ok {
		that2, ok := that.(CShop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SShop) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SShop)
	if !ok {
		that2, ok := that.(SShop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Shop) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Shop)
	if !ok {
		that2, ok := that.(Shop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Propid != that1.Propid {
		return false
	}
	if this.Payway != that1.Payway {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Info != that1.Info {
		return false
	}
	return true
}
func (this *CBuy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CBuy{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBuy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SBuy{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CWxpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CWxpayOrder{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SWxpayOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SWxpayOrder{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Payreq: "+fmt.Sprintf("%#v", this.Payreq)+",\n")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CWxpayQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CWxpayQuery{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Transid: "+fmt.Sprintf("%#v", this.Transid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SWxpayQuery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SWxpayQuery{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Orderid: "+fmt.Sprintf("%#v", this.Orderid)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CApplePay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CApplePay{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Receipt: "+fmt.Sprintf("%#v", this.Receipt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SApplePay) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SApplePay{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CShop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CShop{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SShop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SShop{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Shop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.Shop{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Propid: "+fmt.Sprintf("%#v", this.Propid)+",\n")
	s = append(s, "Payway: "+fmt.Sprintf("%#v", this.Payway)+",\n")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBuy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *SBuy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBuy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Result))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CWxpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CWxpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	return i, nil
}

func (m *SWxpayOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWxpayOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Payreq) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Payreq)))
		i += copy(dAtA[i:], m.Payreq)
	}
	if len(m.Orderid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CWxpayQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CWxpayQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if len(m.Transid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Transid)))
		i += copy(dAtA[i:], m.Transid)
	}
	return i, nil
}

func (m *SWxpayQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SWxpayQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if len(m.Orderid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Orderid)))
		i += copy(dAtA[i:], m.Orderid)
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Result))
	}
	if m.Error != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CApplePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CApplePay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	if len(m.Receipt) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Receipt)))
		i += copy(dAtA[i:], m.Receipt)
	}
	return i, nil
}

func (m *SApplePay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SApplePay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CShop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SShop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SShop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBuy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *Shop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Id))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Status))
	}
	if m.Propid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Propid))
	}
	if m.Payway != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Payway))
	}
	if m.Number != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Number))
	}
	if m.Price != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBuy(dAtA, i, uint64(m.Price))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBuy(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func encodeFixed64Buy(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Buy(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBuy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CBuy) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	return n
}

func (m *SBuy) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Result != 0 {
		n += 1 + sovBuy(uint64(m.Result))
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *CWxpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	return n
}

func (m *SWxpayOrder) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	l = len(m.Payreq)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *CWxpayQuery) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	l = len(m.Transid)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	return n
}

func (m *SWxpayQuery) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	l = len(m.Orderid)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovBuy(uint64(m.Result))
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *CApplePay) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	l = len(m.Receipt)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	return n
}

func (m *SApplePay) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *CShop) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	return n
}

func (m *SShop) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBuy(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBuy(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovBuy(uint64(m.Error))
	}
	return n
}

func (m *Shop) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBuy(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovBuy(uint64(m.Status))
	}
	if m.Propid != 0 {
		n += 1 + sovBuy(uint64(m.Propid))
	}
	if m.Payway != 0 {
		n += 1 + sovBuy(uint64(m.Payway))
	}
	if m.Number != 0 {
		n += 1 + sovBuy(uint64(m.Number))
	}
	if m.Price != 0 {
		n += 1 + sovBuy(uint64(m.Price))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovBuy(uint64(l))
	}
	return n
}

func sovBuy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBuy(x uint64) (n int) {
	return sovBuy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CBuy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBuy{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBuy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBuy{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CWxpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CWxpayOrder{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SWxpayOrder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWxpayOrder{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Payreq:` + fmt.Sprintf("%v", this.Payreq) + `,`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CWxpayQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CWxpayQuery{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Transid:` + fmt.Sprintf("%v", this.Transid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SWxpayQuery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SWxpayQuery{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Orderid:` + fmt.Sprintf("%v", this.Orderid) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CApplePay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CApplePay{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Receipt:` + fmt.Sprintf("%v", this.Receipt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SApplePay) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SApplePay{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CShop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CShop{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SShop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SShop{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Shop", "Shop", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Shop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shop{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Propid:` + fmt.Sprintf("%v", this.Propid) + `,`,
		`Payway:` + fmt.Sprintf("%v", this.Payway) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Info:` + fmt.Sprintf("%v", this.Info) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBuy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBuy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBuy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBuy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CWxpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CWxpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CWxpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWxpayOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWxpayOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWxpayOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CWxpayQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CWxpayQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CWxpayQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SWxpayQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SWxpayQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SWxpayQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CApplePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CApplePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CApplePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SApplePay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SApplePay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SApplePay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SShop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SShop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SShop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Shop{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Shop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Propid", wireType)
			}
			m.Propid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Propid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payway", wireType)
			}
			m.Payway = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payway |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBuy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBuy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBuy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBuy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBuy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("buy.proto", fileDescriptorBuy) }

var fileDescriptorBuy = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0xcd, 0x3a, 0x76, 0x72, 0x9e, 0x28, 0x57, 0x58, 0xe8, 0xb4, 0x02, 0xb4, 0x3a, 0x5c, 0x45,
	0x08, 0xa5, 0x38, 0x4a, 0x2a, 0xce, 0xba, 0x82, 0x0a, 0xb0, 0x85, 0x68, 0x68, 0xec, 0xec, 0x22,
	0x56, 0xca, 0x65, 0x97, 0xb5, 0x0d, 0xb8, 0xa3, 0xa2, 0xe6, 0x67, 0xf0, 0x03, 0xf8, 0x11, 0x94,
	0x57, 0x52, 0x12, 0xd3, 0x50, 0xde, 0x4f, 0x40, 0xfb, 0xa5, 0x03, 0x29, 0x39, 0x39, 0xdd, 0xbc,
	0x37, 0x93, 0x97, 0x37, 0x3b, 0x4f, 0x86, 0xb8, 0x6a, 0xbb, 0xa5, 0x54, 0xa2, 0x11, 0x49, 0x20,
	0xab, 0xbb, 0xb0, 0x12, 0x94, 0x59, 0x9c, 0x3e, 0x84, 0x30, 0x3b, 0x6f, 0xbb, 0x24, 0x81, 0x50,
	0xb3, 0x18, 0x9d, 0xa2, 0xc5, 0x3c, 0x37, 0x75, 0x72, 0x0c, 0x01, 0xa7, 0x38, 0x30, 0x4c, 0xc0,
	0x69, 0xfa, 0x0a, 0xc2, 0x62, 0xdf, 0xec, 0x09, 0x4c, 0x14, 0xab, 0xdb, 0x75, 0xe3, 0xe6, 0x1d,
	0x4a, 0x1e, 0x40, 0xc4, 0x94, 0x12, 0x0a, 0x8f, 0x4f, 0xd1, 0xe2, 0xf8, 0x6c, 0xb6, 0x94, 0xd5,
	0xf2, 0x42, 0xa9, 0x4c, 0x50, 0x96, 0xdb, 0x4e, 0x7a, 0x01, 0xb3, 0xec, 0xf5, 0x27, 0x59, 0x76,
	0xcf, 0x15, 0x65, 0x6a, 0x88, 0x13, 0x3d, 0x53, 0x09, 0xda, 0x19, 0xd1, 0x38, 0x37, 0x75, 0xfa,
	0x05, 0xc1, 0xac, 0x38, 0x50, 0xe7, 0x04, 0x26, 0xb2, 0xec, 0x14, 0x7b, 0xef, 0x94, 0x1c, 0x4a,
	0x30, 0x4c, 0x85, 0x16, 0xe1, 0x14, 0x87, 0xa6, 0xe1, 0xe1, 0xcd, 0x3e, 0xd1, 0xde, 0x7d, 0x9e,
	0xf8, 0x7d, 0x5e, 0xb6, 0x4c, 0xed, 0x7e, 0x2d, 0x0c, 0xd3, 0x46, 0x95, 0x9b, 0xda, 0x99, 0x89,
	0x73, 0x0f, 0xd3, 0x0f, 0x7e, 0x89, 0x5b, 0x7f, 0xec, 0xcd, 0x05, 0xff, 0x9b, 0xbb, 0x39, 0xc2,
	0x78, 0xf7, 0x11, 0xc2, 0xbd, 0xa6, 0x9f, 0x41, 0x9c, 0x3d, 0x95, 0x72, 0xcd, 0x5e, 0x94, 0x83,
	0xc2, 0xa0, 0x5d, 0x28, 0xb6, 0x62, 0x5c, 0x36, 0xee, 0xed, 0x3c, 0x4c, 0x73, 0x88, 0x8b, 0x83,
	0xa4, 0x06, 0x64, 0xe4, 0x1e, 0x44, 0x59, 0xf1, 0x4e, 0xc8, 0x5d, 0x7a, 0xe9, 0x1b, 0x88, 0x8a,
	0x7d, 0xcd, 0xe4, 0x3e, 0x84, 0x6b, 0x5e, 0xeb, 0x58, 0x8e, 0x17, 0xb3, 0xb3, 0x23, 0xad, 0xad,
	0x67, 0x73, 0xc3, 0x0e, 0xf9, 0xeb, 0xef, 0x08, 0x42, 0xa3, 0x6e, 0x6d, 0xa3, 0x7f, 0xc3, 0x53,
	0x37, 0x65, 0xd3, 0xd6, 0x3e, 0xf2, 0x16, 0x99, 0x50, 0x29, 0x21, 0x39, 0xf5, 0x57, 0xb0, 0xc8,
	0x85, 0xed, 0x63, 0xd9, 0x99, 0x33, 0xcc, 0x73, 0x87, 0x34, 0xbf, 0x69, 0x2f, 0x2b, 0x66, 0x33,
	0x35, 0xcf, 0x1d, 0x4a, 0xee, 0x40, 0x24, 0x15, 0x5f, 0x31, 0x3c, 0x31, 0xb4, 0x05, 0x7a, 0xc7,
	0x4d, 0x79, 0xc9, 0xf0, 0xd4, 0x46, 0x5f, 0xd7, 0x9a, 0xe3, 0x9b, 0xb7, 0x02, 0x1f, 0x59, 0x4e,
	0xd7, 0xe7, 0x8f, 0xae, 0xb6, 0x64, 0xf4, 0x73, 0x4b, 0x46, 0xd7, 0x5b, 0x82, 0x3e, 0xf7, 0x04,
	0x7d, 0xeb, 0x09, 0xfa, 0xd1, 0x13, 0x74, 0xd5, 0x13, 0xf4, 0xab, 0x27, 0xe8, 0x4f, 0x4f, 0x46,
	0xd7, 0x3d, 0x41, 0x5f, 0x7f, 0x93, 0x51, 0x35, 0x31, 0x5f, 0x83, 0xc7, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xaa, 0xc2, 0xab, 0xfa, 0x2a, 0x04, 0x00, 0x00,
}
