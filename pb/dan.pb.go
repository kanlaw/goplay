// Code generated by protoc-gen-gogo.
// source: dan.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 排位基本数据信息
type CDanInfo struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CDanInfo) Reset()                    { *m = CDanInfo{} }
func (*CDanInfo) ProtoMessage()               {}
func (*CDanInfo) Descriptor() ([]byte, []int) { return fileDescriptorDan, []int{0} }

func (m *CDanInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SDanInfo struct {
	Code  uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Info  []*DanList `protobuf:"bytes,2,rep,name=info" json:"info,omitempty"`
	Error ErrCode    `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SDanInfo) Reset()                    { *m = SDanInfo{} }
func (*SDanInfo) ProtoMessage()               {}
func (*SDanInfo) Descriptor() ([]byte, []int) { return fileDescriptorDan, []int{1} }

func (m *SDanInfo) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDanInfo) GetInfo() []*DanList {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SDanInfo) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 个人排位赛数据
type CQualifying struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CQualifying) Reset()                    { *m = CQualifying{} }
func (*CQualifying) ProtoMessage()               {}
func (*CQualifying) Descriptor() ([]byte, []int) { return fileDescriptorDan, []int{2} }

func (m *CQualifying) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SQualifying struct {
	Code   uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Task   []*DanTaskList `protobuf:"bytes,2,rep,name=task" json:"task,omitempty"`
	Combat *DanCombat     `protobuf:"bytes,3,opt,name=combat" json:"combat,omitempty"`
	Season *DanSeason     `protobuf:"bytes,4,opt,name=season" json:"season,omitempty"`
	Error  ErrCode        `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SQualifying) Reset()                    { *m = SQualifying{} }
func (*SQualifying) ProtoMessage()               {}
func (*SQualifying) Descriptor() ([]byte, []int) { return fileDescriptorDan, []int{3} }

func (m *SQualifying) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SQualifying) GetTask() []*DanTaskList {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *SQualifying) GetCombat() *DanCombat {
	if m != nil {
		return m.Combat
	}
	return nil
}

func (m *SQualifying) GetSeason() *DanSeason {
	if m != nil {
		return m.Season
	}
	return nil
}

func (m *SQualifying) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 排位赛排行榜
type CDanRanking struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CDanRanking) Reset()                    { *m = CDanRanking{} }
func (*CDanRanking) ProtoMessage()               {}
func (*CDanRanking) Descriptor() ([]byte, []int) { return fileDescriptorDan, []int{4} }

func (m *CDanRanking) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SDanRanking struct {
	Code  uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List  []*DanRanking `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	Error ErrCode       `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SDanRanking) Reset()                    { *m = SDanRanking{} }
func (*SDanRanking) ProtoMessage()               {}
func (*SDanRanking) Descriptor() ([]byte, []int) { return fileDescriptorDan, []int{5} }

func (m *SDanRanking) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDanRanking) GetList() []*DanRanking {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SDanRanking) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 排位赛更新
type SDanNotice struct {
	Code   uint32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userid string     `protobuf:"bytes,2,opt,name=userid,proto3" json:"userid,omitempty"`
	Combat *DanCombat `protobuf:"bytes,3,opt,name=combat" json:"combat,omitempty"`
}

func (m *SDanNotice) Reset()                    { *m = SDanNotice{} }
func (*SDanNotice) ProtoMessage()               {}
func (*SDanNotice) Descriptor() ([]byte, []int) { return fileDescriptorDan, []int{6} }

func (m *SDanNotice) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDanNotice) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *SDanNotice) GetCombat() *DanCombat {
	if m != nil {
		return m.Combat
	}
	return nil
}

func init() {
	proto.RegisterType((*CDanInfo)(nil), "pb.CDanInfo")
	proto.RegisterType((*SDanInfo)(nil), "pb.SDanInfo")
	proto.RegisterType((*CQualifying)(nil), "pb.CQualifying")
	proto.RegisterType((*SQualifying)(nil), "pb.SQualifying")
	proto.RegisterType((*CDanRanking)(nil), "pb.CDanRanking")
	proto.RegisterType((*SDanRanking)(nil), "pb.SDanRanking")
	proto.RegisterType((*SDanNotice)(nil), "pb.SDanNotice")
}
func (this *CDanInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CDanInfo)
	if !ok {
		that2, ok := that.(CDanInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SDanInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDanInfo)
	if !ok {
		that2, ok := that.(SDanInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.Info) != len(that1.Info) {
		return false
	}
	for i := range this.Info {
		if !this.Info[i].Equal(that1.Info[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CQualifying) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CQualifying)
	if !ok {
		that2, ok := that.(CQualifying)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SQualifying) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SQualifying)
	if !ok {
		that2, ok := that.(SQualifying)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.Task) != len(that1.Task) {
		return false
	}
	for i := range this.Task {
		if !this.Task[i].Equal(that1.Task[i]) {
			return false
		}
	}
	if !this.Combat.Equal(that1.Combat) {
		return false
	}
	if !this.Season.Equal(that1.Season) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CDanRanking) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CDanRanking)
	if !ok {
		that2, ok := that.(CDanRanking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SDanRanking) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDanRanking)
	if !ok {
		that2, ok := that.(SDanRanking)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SDanNotice) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDanNotice)
	if !ok {
		that2, ok := that.(SDanNotice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if !this.Combat.Equal(that1.Combat) {
		return false
	}
	return true
}
func (this *CDanInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CDanInfo{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDanInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SDanInfo{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CQualifying) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CQualifying{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SQualifying) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SQualifying{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Task != nil {
		s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	}
	if this.Combat != nil {
		s = append(s, "Combat: "+fmt.Sprintf("%#v", this.Combat)+",\n")
	}
	if this.Season != nil {
		s = append(s, "Season: "+fmt.Sprintf("%#v", this.Season)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDanRanking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CDanRanking{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDanRanking) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SDanRanking{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDanNotice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SDanNotice{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	if this.Combat != nil {
		s = append(s, "Combat: "+fmt.Sprintf("%#v", this.Combat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDan(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CDanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDanInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SDanInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDanInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Code))
	}
	if len(m.Info) > 0 {
		for _, msg := range m.Info {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CQualifying) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CQualifying) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SQualifying) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQualifying) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Code))
	}
	if len(m.Task) > 0 {
		for _, msg := range m.Task {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Combat != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Combat.Size()))
		n1, err := m.Combat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Season != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Season.Size()))
		n2, err := m.Season.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CDanRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDanRanking) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SDanRanking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDanRanking) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDan(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SDanNotice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDanNotice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Code))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDan(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Combat != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDan(dAtA, i, uint64(m.Combat.Size()))
		n3, err := m.Combat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Dan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CDanInfo) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDan(uint64(m.Code))
	}
	return n
}

func (m *SDanInfo) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDan(uint64(m.Code))
	}
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovDan(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovDan(uint64(m.Error))
	}
	return n
}

func (m *CQualifying) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDan(uint64(m.Code))
	}
	return n
}

func (m *SQualifying) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDan(uint64(m.Code))
	}
	if len(m.Task) > 0 {
		for _, e := range m.Task {
			l = e.Size()
			n += 1 + l + sovDan(uint64(l))
		}
	}
	if m.Combat != nil {
		l = m.Combat.Size()
		n += 1 + l + sovDan(uint64(l))
	}
	if m.Season != nil {
		l = m.Season.Size()
		n += 1 + l + sovDan(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovDan(uint64(m.Error))
	}
	return n
}

func (m *CDanRanking) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDan(uint64(m.Code))
	}
	return n
}

func (m *SDanRanking) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDan(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDan(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovDan(uint64(m.Error))
	}
	return n
}

func (m *SDanNotice) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDan(uint64(m.Code))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovDan(uint64(l))
	}
	if m.Combat != nil {
		l = m.Combat.Size()
		n += 1 + l + sovDan(uint64(l))
	}
	return n
}

func sovDan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDan(x uint64) (n int) {
	return sovDan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CDanInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDanInfo{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDanInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDanInfo{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "DanList", "DanList", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CQualifying) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CQualifying{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SQualifying) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SQualifying{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "DanTaskList", "DanTaskList", 1) + `,`,
		`Combat:` + strings.Replace(fmt.Sprintf("%v", this.Combat), "DanCombat", "DanCombat", 1) + `,`,
		`Season:` + strings.Replace(fmt.Sprintf("%v", this.Season), "DanSeason", "DanSeason", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDanRanking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDanRanking{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDanRanking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDanRanking{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "DanRanking", "DanRanking", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDanNotice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDanNotice{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Combat:` + strings.Replace(fmt.Sprintf("%v", this.Combat), "DanCombat", "DanCombat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDan(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CDanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDanInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDanInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDanInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &DanList{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CQualifying) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CQualifying: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CQualifying: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQualifying) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQualifying: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQualifying: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Task = append(m.Task, &DanTaskList{})
			if err := m.Task[len(m.Task)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Combat == nil {
				m.Combat = &DanCombat{}
			}
			if err := m.Combat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Season == nil {
				m.Season = &DanSeason{}
			}
			if err := m.Season.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDanRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDanRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDanRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDanRanking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDanRanking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDanRanking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DanRanking{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDanNotice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDanNotice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDanNotice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Combat == nil {
				m.Combat = &DanCombat{}
			}
			if err := m.Combat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDan   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dan.proto", fileDescriptorDan) }

var fileDescriptorDan = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x33, 0x6d, 0x5a, 0xda, 0x13, 0xda, 0x0b, 0xb3, 0xb8, 0x84, 0x2e, 0xe6, 0xa6, 0xb9,
	0x08, 0x59, 0x48, 0x17, 0xf5, 0x0d, 0x4c, 0x5d, 0x08, 0x22, 0x38, 0x71, 0x2f, 0x93, 0x26, 0xd5,
	0xd0, 0x3a, 0x13, 0x32, 0xe9, 0xc2, 0x9d, 0x8f, 0xe0, 0x63, 0xf8, 0x06, 0xbe, 0x82, 0xcb, 0x2e,
	0x5d, 0xda, 0x71, 0xe3, 0xb2, 0x8f, 0x20, 0x99, 0x0c, 0x88, 0x50, 0x43, 0x77, 0xe7, 0x9c, 0xef,
	0x1f, 0xce, 0xff, 0x1f, 0x06, 0xfa, 0x09, 0xe3, 0x93, 0xbc, 0x10, 0xa5, 0xc0, 0xad, 0x3c, 0x1e,
	0xf5, 0xf3, 0x75, 0x5c, 0xb7, 0x23, 0x98, 0x8b, 0x24, 0xad, 0x6b, 0x9f, 0x40, 0x2f, 0x9c, 0x31,
	0x7e, 0xce, 0x17, 0x02, 0x63, 0xb0, 0x2b, 0xe2, 0x22, 0x0f, 0x05, 0x03, 0xaa, 0x6b, 0x3f, 0x86,
	0x5e, 0xd4, 0xc0, 0xf1, 0x3f, 0xb0, 0x33, 0xbe, 0x10, 0x6e, 0xcb, 0x6b, 0x07, 0xce, 0xd4, 0x99,
	0xe4, 0xf1, 0x64, 0xc6, 0xf8, 0x45, 0x26, 0x4b, 0xaa, 0x01, 0x1e, 0x43, 0x27, 0x2d, 0x0a, 0x51,
	0xb8, 0x6d, 0x0f, 0x05, 0xc3, 0x5a, 0x71, 0x56, 0x14, 0xa1, 0x48, 0x52, 0x5a, 0x13, 0x7f, 0x0c,
	0x4e, 0x78, 0xb5, 0x66, 0xab, 0x6c, 0xf1, 0x90, 0xf1, 0xdb, 0xbd, 0x36, 0x5e, 0x10, 0x38, 0x51,
	0xb3, 0x06, 0xff, 0x07, 0xbb, 0x64, 0x72, 0x69, 0xac, 0xfc, 0x31, 0x56, 0xae, 0x99, 0x5c, 0xd6,
	0x76, 0x2a, 0x88, 0x8f, 0xa0, 0x3b, 0x17, 0xf7, 0x31, 0x2b, 0xb5, 0x1f, 0x67, 0x3a, 0x30, 0xb2,
	0x50, 0x0f, 0xa9, 0x81, 0x95, 0x4c, 0xa6, 0x4c, 0x0a, 0xee, 0xda, 0x3f, 0x64, 0x91, 0x1e, 0x52,
	0x03, 0xbf, 0xc3, 0x75, 0x1a, 0xc3, 0xcd, 0x18, 0xa7, 0x8c, 0x2f, 0x7f, 0x0b, 0x77, 0x07, 0x4e,
	0xd4, 0x2c, 0xc1, 0x3e, 0xd8, 0xab, 0x4c, 0x96, 0x26, 0xdb, 0xd0, 0xb8, 0x31, 0x2f, 0xa8, 0x66,
	0x87, 0x5c, 0xfa, 0x06, 0xa0, 0xda, 0x74, 0x29, 0xca, 0x6c, 0x9e, 0xee, 0x5d, 0xf4, 0x17, 0xba,
	0x6b, 0x99, 0x16, 0x59, 0xe2, 0xb6, 0x3c, 0x14, 0xf4, 0xa9, 0xe9, 0x0e, 0xbc, 0xdb, 0xe9, 0xf1,
	0x66, 0x4b, 0xac, 0xb7, 0x2d, 0xb1, 0x76, 0x5b, 0x82, 0x1e, 0x15, 0x41, 0xcf, 0x8a, 0xa0, 0x57,
	0x45, 0xd0, 0x46, 0x11, 0xf4, 0xae, 0x08, 0xfa, 0x54, 0xc4, 0xda, 0x29, 0x82, 0x9e, 0x3e, 0x88,
	0x15, 0x77, 0xf5, 0x1f, 0x3c, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xe4, 0x9d, 0xda, 0xab,
	0x02, 0x00, 0x00,
}
