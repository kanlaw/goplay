// Code generated by protoc-gen-gogo.
// source: niu.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CEnterRoom struct {
	Code       uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Invitecode string `protobuf:"bytes,2,opt,name=invitecode,proto3" json:"invitecode,omitempty"`
}

func (m *CEnterRoom) Reset()                    { *m = CEnterRoom{} }
func (*CEnterRoom) ProtoMessage()               {}
func (*CEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{0} }

func (m *CEnterRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CEnterRoom) GetInvitecode() string {
	if m != nil {
		return m.Invitecode
	}
	return ""
}

type SEnterRoom struct {
	Code     uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roominfo *RoomData   `protobuf:"bytes,2,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*RoomUser `protobuf:"bytes,3,rep,name=userinfo" json:"userinfo,omitempty"`
	Voteinfo *RoomVote   `protobuf:"bytes,4,opt,name=voteinfo" json:"voteinfo,omitempty"`
	Betsinfo []*RoomBets `protobuf:"bytes,5,rep,name=betsinfo" json:"betsinfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEnterRoom) Reset()                    { *m = SEnterRoom{} }
func (*SEnterRoom) ProtoMessage()               {}
func (*SEnterRoom) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{1} }

func (m *SEnterRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SEnterRoom) GetRoominfo() *RoomData {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SEnterRoom) GetUserinfo() []*RoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEnterRoom) GetVoteinfo() *RoomVote {
	if m != nil {
		return m.Voteinfo
	}
	return nil
}

func (m *SEnterRoom) GetBetsinfo() []*RoomBets {
	if m != nil {
		return m.Betsinfo
	}
	return nil
}

func (m *SEnterRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 创建房间
type CCreateRoom struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Rname   string `protobuf:"bytes,2,opt,name=rname,proto3" json:"rname,omitempty"`
	Rtype   uint32 `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Ante    uint32 `protobuf:"varint,4,opt,name=ante,proto3" json:"ante,omitempty"`
	Round   uint32 `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Payment uint32 `protobuf:"varint,6,opt,name=payment,proto3" json:"payment,omitempty"`
	Count   uint32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Chat    uint32 `protobuf:"varint,8,opt,name=chat,proto3" json:"chat,omitempty"`
}

func (m *CCreateRoom) Reset()                    { *m = CCreateRoom{} }
func (*CCreateRoom) ProtoMessage()               {}
func (*CCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{2} }

func (m *CCreateRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CCreateRoom) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *CCreateRoom) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CCreateRoom) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *CCreateRoom) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CCreateRoom) GetPayment() uint32 {
	if m != nil {
		return m.Payment
	}
	return 0
}

func (m *CCreateRoom) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CCreateRoom) GetChat() uint32 {
	if m != nil {
		return m.Chat
	}
	return 0
}

// 返回房间数据,
type SCreateRoom struct {
	Code  uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Rdata *RoomData `protobuf:"bytes,2,opt,name=rdata" json:"rdata,omitempty"`
	Error ErrCode   `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SCreateRoom) Reset()                    { *m = SCreateRoom{} }
func (*SCreateRoom) ProtoMessage()               {}
func (*SCreateRoom) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{3} }

func (m *SCreateRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SCreateRoom) GetRdata() *RoomData {
	if m != nil {
		return m.Rdata
	}
	return nil
}

func (m *SCreateRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 其他玩家进入房间
type SCamein struct {
	Code     uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userinfo *RoomUser `protobuf:"bytes,2,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *SCamein) Reset()                    { *m = SCamein{} }
func (*SCamein) ProtoMessage()               {}
func (*SCamein) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{4} }

func (m *SCamein) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SCamein) GetUserinfo() *RoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

// 2.发牌(全部准备后或达到开始条件,发完状态切为抢庄)
type SDraw struct {
	Code  uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	State uint32   `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Cards []uint32 `protobuf:"varint,4,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *SDraw) Reset()                    { *m = SDraw{} }
func (*SDraw) ProtoMessage()               {}
func (*SDraw) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{5} }

func (m *SDraw) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDraw) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SDraw) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SDraw) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 3.开始抢庄(发完第一轮牌后,抢完切为下注)
type CDealer struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dealer bool   `protobuf:"varint,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Num    uint32 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *CDealer) Reset()                    { *m = CDealer{} }
func (*CDealer) ProtoMessage()               {}
func (*CDealer) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{6} }

func (m *CDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CDealer) GetDealer() bool {
	if m != nil {
		return m.Dealer
	}
	return false
}

func (m *CDealer) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SDealer struct {
	Code   uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat   uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Dealer bool    `protobuf:"varint,3,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Num    uint32  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	Error  ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SDealer) Reset()                    { *m = SDealer{} }
func (*SDealer) ProtoMessage()               {}
func (*SDealer) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{7} }

func (m *SDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SDealer) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SDealer) GetDealer() bool {
	if m != nil {
		return m.Dealer
	}
	return false
}

func (m *SDealer) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SDealer) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 完成抢庄,推送庄家位置
type SPushDealer struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dealer uint32 `protobuf:"varint,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
}

func (m *SPushDealer) Reset()                    { *m = SPushDealer{} }
func (*SPushDealer) ProtoMessage()               {}
func (*SPushDealer) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{8} }

func (m *SPushDealer) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushDealer) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

// 4.玩家下注(抢庄完成后),下注完成后再步骤2发牌
type CBet struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seatbet uint32 `protobuf:"varint,2,opt,name=seatbet,proto3" json:"seatbet,omitempty"`
	Value   uint32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CBet) Reset()                    { *m = CBet{} }
func (*CBet) ProtoMessage()               {}
func (*CBet) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{9} }

func (m *CBet) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CBet) GetSeatbet() uint32 {
	if m != nil {
		return m.Seatbet
	}
	return 0
}

func (m *CBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SBet struct {
	Code    uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat    uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Seatbet uint32  `protobuf:"varint,3,opt,name=seatbet,proto3" json:"seatbet,omitempty"`
	Value   uint32  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Error   ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SBet) Reset()                    { *m = SBet{} }
func (*SBet) ProtoMessage()               {}
func (*SBet) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{10} }

func (m *SBet) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SBet) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SBet) GetSeatbet() uint32 {
	if m != nil {
		return m.Seatbet
	}
	return 0
}

func (m *SBet) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SBet) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 5.玩家组合牌提交
type CNiu struct {
	Code  uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Value uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Cards []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *CNiu) Reset()                    { *m = CNiu{} }
func (*CNiu) ProtoMessage()               {}
func (*CNiu) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{11} }

func (m *CNiu) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CNiu) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CNiu) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 广播提交结果
type SNiu struct {
	Code  uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Value uint32   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Cards []uint32 `protobuf:"varint,4,rep,packed,name=cards" json:"cards,omitempty"`
	Error ErrCode  `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SNiu) Reset()                    { *m = SNiu{} }
func (*SNiu) ProtoMessage()               {}
func (*SNiu) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{12} }

func (m *SNiu) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SNiu) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SNiu) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SNiu) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SNiu) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 结算广播接口，游戏结束
type SGameover struct {
	Code   uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dealer uint32      `protobuf:"varint,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Round  uint32      `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Data   []*RoomOver `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	List   []*OverList `protobuf:"bytes,5,rep,name=list" json:"list,omitempty"`
}

func (m *SGameover) Reset()                    { *m = SGameover{} }
func (*SGameover) ProtoMessage()               {}
func (*SGameover) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{13} }

func (m *SGameover) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SGameover) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *SGameover) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SGameover) GetData() []*RoomOver {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SGameover) GetList() []*OverList {
	if m != nil {
		return m.List
	}
	return nil
}

// 个人牌局记录,默认最近30场
type CGameRecord struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *CGameRecord) Reset()                    { *m = CGameRecord{} }
func (*CGameRecord) ProtoMessage()               {}
func (*CGameRecord) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{14} }

func (m *CGameRecord) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CGameRecord) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SGameRecord struct {
	Code uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List []*RecordList `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *SGameRecord) Reset()                    { *m = SGameRecord{} }
func (*SGameRecord) ProtoMessage()               {}
func (*SGameRecord) Descriptor() ([]byte, []int) { return fileDescriptorNiu, []int{15} }

func (m *SGameRecord) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SGameRecord) GetList() []*RecordList {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*CEnterRoom)(nil), "pb.CEnterRoom")
	proto.RegisterType((*SEnterRoom)(nil), "pb.SEnterRoom")
	proto.RegisterType((*CCreateRoom)(nil), "pb.CCreateRoom")
	proto.RegisterType((*SCreateRoom)(nil), "pb.SCreateRoom")
	proto.RegisterType((*SCamein)(nil), "pb.SCamein")
	proto.RegisterType((*SDraw)(nil), "pb.SDraw")
	proto.RegisterType((*CDealer)(nil), "pb.CDealer")
	proto.RegisterType((*SDealer)(nil), "pb.SDealer")
	proto.RegisterType((*SPushDealer)(nil), "pb.SPushDealer")
	proto.RegisterType((*CBet)(nil), "pb.CBet")
	proto.RegisterType((*SBet)(nil), "pb.SBet")
	proto.RegisterType((*CNiu)(nil), "pb.CNiu")
	proto.RegisterType((*SNiu)(nil), "pb.SNiu")
	proto.RegisterType((*SGameover)(nil), "pb.SGameover")
	proto.RegisterType((*CGameRecord)(nil), "pb.CGameRecord")
	proto.RegisterType((*SGameRecord)(nil), "pb.SGameRecord")
}
func (this *CEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CEnterRoom)
	if !ok {
		that2, ok := that.(CEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Invitecode != that1.Invitecode {
		return false
	}
	return true
}
func (this *SEnterRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SEnterRoom)
	if !ok {
		that2, ok := that.(SEnterRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if !this.Voteinfo.Equal(that1.Voteinfo) {
		return false
	}
	if len(this.Betsinfo) != len(that1.Betsinfo) {
		return false
	}
	for i := range this.Betsinfo {
		if !this.Betsinfo[i].Equal(that1.Betsinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CCreateRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CCreateRoom)
	if !ok {
		that2, ok := that.(CCreateRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Payment != that1.Payment {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Chat != that1.Chat {
		return false
	}
	return true
}
func (this *SCreateRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SCreateRoom)
	if !ok {
		that2, ok := that.(SCreateRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Rdata.Equal(that1.Rdata) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SCamein) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SCamein)
	if !ok {
		that2, ok := that.(SCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	return true
}
func (this *SDraw) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDraw)
	if !ok {
		that2, ok := that.(SDraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *CDealer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CDealer)
	if !ok {
		that2, ok := that.(CDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *SDealer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SDealer)
	if !ok {
		that2, ok := that.(SDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SPushDealer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushDealer)
	if !ok {
		that2, ok := that.(SPushDealer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	return true
}
func (this *CBet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CBet)
	if !ok {
		that2, ok := that.(CBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seatbet != that1.Seatbet {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SBet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SBet)
	if !ok {
		that2, ok := that.(SBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Seatbet != that1.Seatbet {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CNiu) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CNiu)
	if !ok {
		that2, ok := that.(CNiu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *SNiu) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SNiu)
	if !ok {
		that2, ok := that.(SNiu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SGameover) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SGameover)
	if !ok {
		that2, ok := that.(SGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !this.Data[i].Equal(that1.Data[i]) {
			return false
		}
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *CGameRecord) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CGameRecord)
	if !ok {
		that2, ok := that.(CGameRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *SGameRecord) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SGameRecord)
	if !ok {
		that2, ok := that.(SGameRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *CEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CEnterRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Invitecode: "+fmt.Sprintf("%#v", this.Invitecode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEnterRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.SEnterRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Voteinfo != nil {
		s = append(s, "Voteinfo: "+fmt.Sprintf("%#v", this.Voteinfo)+",\n")
	}
	if this.Betsinfo != nil {
		s = append(s, "Betsinfo: "+fmt.Sprintf("%#v", this.Betsinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CCreateRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.CCreateRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Chat: "+fmt.Sprintf("%#v", this.Chat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCreateRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SCreateRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Rdata != nil {
		s = append(s, "Rdata: "+fmt.Sprintf("%#v", this.Rdata)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SCamein{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SDraw{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushDealer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SPushDealer{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CBet{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seatbet: "+fmt.Sprintf("%#v", this.Seatbet)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SBet{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Seatbet: "+fmt.Sprintf("%#v", this.Seatbet)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CNiu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CNiu{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SNiu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SNiu{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SGameover{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CGameRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CGameRecord{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SGameRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SGameRecord{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNiu(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if len(m.Invitecode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiu(dAtA, i, uint64(len(m.Invitecode)))
		i += copy(dAtA[i:], m.Invitecode)
	}
	return i, nil
}

func (m *SEnterRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEnterRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Roominfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNiu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Voteinfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Voteinfo.Size()))
		n2, err := m.Voteinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Betsinfo) > 0 {
		for _, msg := range m.Betsinfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintNiu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiu(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Rtype))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Ante))
	}
	if m.Round != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Round))
	}
	if m.Payment != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Payment))
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Count))
	}
	if m.Chat != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Chat))
	}
	return i, nil
}

func (m *SCreateRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCreateRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Rdata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Rdata.Size()))
		n3, err := m.Rdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Userinfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Userinfo.Size()))
		n4, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Seat))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.State))
	}
	if len(m.Cards) > 0 {
		dAtA6 := make([]byte, len(m.Cards)*10)
		var j5 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintNiu(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *CDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Dealer {
		dAtA[i] = 0x10
		i++
		if m.Dealer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *SDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Seat))
	}
	if m.Dealer {
		dAtA[i] = 0x18
		i++
		if m.Dealer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Num != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Num))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SPushDealer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushDealer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Dealer))
	}
	return i, nil
}

func (m *CBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Seatbet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Seatbet))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Seat))
	}
	if m.Seatbet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Seatbet))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Value))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CNiu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CNiu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		dAtA8 := make([]byte, len(m.Cards)*10)
		var j7 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNiu(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *SNiu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SNiu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Seat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		dAtA10 := make([]byte, len(m.Cards)*10)
		var j9 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintNiu(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Dealer))
	}
	if m.Round != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Round))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x22
			i++
			i = encodeVarintNiu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintNiu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CGameRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *SGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SGameRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNiu(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintNiu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Niu(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Niu(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNiu(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	l = len(m.Invitecode)
	if l > 0 {
		n += 1 + l + sovNiu(uint64(l))
	}
	return n
}

func (m *SEnterRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovNiu(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovNiu(uint64(l))
		}
	}
	if m.Voteinfo != nil {
		l = m.Voteinfo.Size()
		n += 1 + l + sovNiu(uint64(l))
	}
	if len(m.Betsinfo) > 0 {
		for _, e := range m.Betsinfo {
			l = e.Size()
			n += 1 + l + sovNiu(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovNiu(uint64(m.Error))
	}
	return n
}

func (m *CCreateRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovNiu(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovNiu(uint64(m.Rtype))
	}
	if m.Ante != 0 {
		n += 1 + sovNiu(uint64(m.Ante))
	}
	if m.Round != 0 {
		n += 1 + sovNiu(uint64(m.Round))
	}
	if m.Payment != 0 {
		n += 1 + sovNiu(uint64(m.Payment))
	}
	if m.Count != 0 {
		n += 1 + sovNiu(uint64(m.Count))
	}
	if m.Chat != 0 {
		n += 1 + sovNiu(uint64(m.Chat))
	}
	return n
}

func (m *SCreateRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Rdata != nil {
		l = m.Rdata.Size()
		n += 1 + l + sovNiu(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovNiu(uint64(m.Error))
	}
	return n
}

func (m *SCamein) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovNiu(uint64(l))
	}
	return n
}

func (m *SDraw) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovNiu(uint64(m.Seat))
	}
	if m.State != 0 {
		n += 1 + sovNiu(uint64(m.State))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiu(uint64(e))
		}
		n += 1 + sovNiu(uint64(l)) + l
	}
	return n
}

func (m *CDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Dealer {
		n += 2
	}
	if m.Num != 0 {
		n += 1 + sovNiu(uint64(m.Num))
	}
	return n
}

func (m *SDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovNiu(uint64(m.Seat))
	}
	if m.Dealer {
		n += 2
	}
	if m.Num != 0 {
		n += 1 + sovNiu(uint64(m.Num))
	}
	if m.Error != 0 {
		n += 1 + sovNiu(uint64(m.Error))
	}
	return n
}

func (m *SPushDealer) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Dealer != 0 {
		n += 1 + sovNiu(uint64(m.Dealer))
	}
	return n
}

func (m *CBet) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Seatbet != 0 {
		n += 1 + sovNiu(uint64(m.Seatbet))
	}
	if m.Value != 0 {
		n += 1 + sovNiu(uint64(m.Value))
	}
	return n
}

func (m *SBet) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovNiu(uint64(m.Seat))
	}
	if m.Seatbet != 0 {
		n += 1 + sovNiu(uint64(m.Seatbet))
	}
	if m.Value != 0 {
		n += 1 + sovNiu(uint64(m.Value))
	}
	if m.Error != 0 {
		n += 1 + sovNiu(uint64(m.Error))
	}
	return n
}

func (m *CNiu) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Value != 0 {
		n += 1 + sovNiu(uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiu(uint64(e))
		}
		n += 1 + sovNiu(uint64(l)) + l
	}
	return n
}

func (m *SNiu) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovNiu(uint64(m.Seat))
	}
	if m.Value != 0 {
		n += 1 + sovNiu(uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovNiu(uint64(e))
		}
		n += 1 + sovNiu(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovNiu(uint64(m.Error))
	}
	return n
}

func (m *SGameover) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Dealer != 0 {
		n += 1 + sovNiu(uint64(m.Dealer))
	}
	if m.Round != 0 {
		n += 1 + sovNiu(uint64(m.Round))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovNiu(uint64(l))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovNiu(uint64(l))
		}
	}
	return n
}

func (m *CGameRecord) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if m.Page != 0 {
		n += 1 + sovNiu(uint64(m.Page))
	}
	return n
}

func (m *SGameRecord) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNiu(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovNiu(uint64(l))
		}
	}
	return n
}

func sovNiu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNiu(x uint64) (n int) {
	return sovNiu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEnterRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Invitecode:` + fmt.Sprintf("%v", this.Invitecode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEnterRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEnterRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "RoomData", "RoomData", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "RoomUser", "RoomUser", 1) + `,`,
		`Voteinfo:` + strings.Replace(fmt.Sprintf("%v", this.Voteinfo), "RoomVote", "RoomVote", 1) + `,`,
		`Betsinfo:` + strings.Replace(fmt.Sprintf("%v", this.Betsinfo), "RoomBets", "RoomBets", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CCreateRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CCreateRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Payment:` + fmt.Sprintf("%v", this.Payment) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Chat:` + fmt.Sprintf("%v", this.Chat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCreateRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCreateRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rdata:` + strings.Replace(fmt.Sprintf("%v", this.Rdata), "RoomData", "RoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCamein{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "RoomUser", "RoomUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDraw{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushDealer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushDealer{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CBet{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seatbet:` + fmt.Sprintf("%v", this.Seatbet) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SBet{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Seatbet:` + fmt.Sprintf("%v", this.Seatbet) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CNiu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CNiu{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNiu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SNiu{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGameover{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "RoomOver", "RoomOver", 1) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "OverList", "OverList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CGameRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CGameRecord{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SGameRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SGameRecord{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "RecordList", "RecordList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNiu(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitecode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invitecode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEnterRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEnterRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEnterRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &RoomData{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &RoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voteinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voteinfo == nil {
				m.Voteinfo = &RoomVote{}
			}
			if err := m.Voteinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Betsinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Betsinfo = append(m.Betsinfo, &RoomBets{})
			if err := m.Betsinfo[len(m.Betsinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			m.Payment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payment |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			m.Chat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCreateRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCreateRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCreateRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rdata == nil {
				m.Rdata = &RoomData{}
			}
			if err := m.Rdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &RoomUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dealer = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dealer = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushDealer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushDealer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushDealer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seatbet", wireType)
			}
			m.Seatbet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seatbet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seatbet", wireType)
			}
			m.Seatbet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seatbet |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CNiu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CNiu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CNiu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SNiu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SNiu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SNiu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNiu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNiu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNiu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomOver{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &OverList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNiu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RecordList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNiu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNiu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNiu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNiu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNiu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNiu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNiu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNiu(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNiu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNiu   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("niu.proto", fileDescriptorNiu) }

var fileDescriptorNiu = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xb1, 0x6e, 0xd3, 0x40,
	0x18, 0xce, 0xc5, 0x76, 0x93, 0xfe, 0x26, 0x15, 0xb2, 0x10, 0xb2, 0x3a, 0x58, 0xc1, 0x53, 0x06,
	0xd4, 0xa1, 0x88, 0x81, 0x0d, 0xd5, 0x2d, 0x95, 0x10, 0x02, 0x74, 0x16, 0x2c, 0x4c, 0x97, 0xfa,
	0x20, 0x96, 0x6a, 0x5f, 0x74, 0x3e, 0x07, 0x75, 0x00, 0xc1, 0x1b, 0xc0, 0x5b, 0xf0, 0x0e, 0xbc,
	0x00, 0x63, 0x47, 0x46, 0x6a, 0x16, 0x24, 0x96, 0x3e, 0x02, 0xba, 0xdf, 0xb1, 0xe3, 0x80, 0xdd,
	0x86, 0xed, 0xff, 0xf2, 0x7d, 0xf7, 0xfd, 0xff, 0x7d, 0x77, 0xbe, 0xc0, 0x76, 0x1a, 0xe7, 0x7b,
	0x73, 0x29, 0x94, 0x70, 0xfa, 0xf3, 0xe9, 0xee, 0x70, 0x21, 0x4a, 0xb4, 0x0b, 0x27, 0x22, 0xe2,
	0x65, 0xed, 0x3f, 0x04, 0x08, 0x8e, 0x52, 0xc5, 0x25, 0x15, 0x22, 0x71, 0x1c, 0x30, 0x35, 0xe7,
	0x92, 0x31, 0x99, 0x8c, 0x28, 0xd6, 0x8e, 0x07, 0x10, 0xa7, 0x8b, 0x58, 0x71, 0x64, 0xfa, 0x63,
	0x32, 0xd9, 0xa6, 0x8d, 0x5f, 0xfc, 0xdf, 0x04, 0x20, 0xbc, 0xda, 0x62, 0x02, 0x43, 0x29, 0x44,
	0x12, 0xa7, 0xaf, 0x05, 0x1a, 0xd8, 0xfb, 0x37, 0xf6, 0xe6, 0xd3, 0x3d, 0xad, 0x3f, 0x64, 0x8a,
	0xd1, 0x9a, 0xd5, 0xca, 0x3c, 0xe3, 0x12, 0x95, 0xc6, 0xd8, 0x68, 0x2a, 0x5f, 0x64, 0x5c, 0xd2,
	0x9a, 0xd5, 0xca, 0x85, 0x50, 0x1c, 0x95, 0xe6, 0xba, 0xe7, 0x4b, 0xa1, 0x38, 0xad, 0x59, 0xad,
	0x9c, 0x72, 0x95, 0xa1, 0xd2, 0x5a, 0xf7, 0x3c, 0xe0, 0x2a, 0xa3, 0x35, 0xeb, 0xdc, 0x01, 0x8b,
	0x4b, 0x29, 0xa4, 0xbb, 0x35, 0x26, 0x93, 0x9d, 0x7d, 0x5b, 0xcb, 0x8e, 0xa4, 0x0c, 0x44, 0xc4,
	0x69, 0xc9, 0xf8, 0x5f, 0x09, 0xd8, 0x41, 0x20, 0x39, 0x53, 0xbc, 0x73, 0xbb, 0xb7, 0xc0, 0x92,
	0x29, 0x4b, 0xaa, 0xb0, 0x4a, 0x80, 0xbf, 0xaa, 0xb3, 0x39, 0x77, 0x0d, 0x94, 0x96, 0x40, 0xaf,
	0x67, 0xa9, 0xe2, 0xb8, 0x85, 0x11, 0xc5, 0x1a, 0x95, 0x22, 0x4f, 0x23, 0xd7, 0x5a, 0x2a, 0x35,
	0x70, 0x5c, 0x18, 0xcc, 0xd9, 0x59, 0xc2, 0x53, 0x85, 0xe3, 0x8d, 0x68, 0x05, 0xb5, 0xfe, 0x44,
	0xe4, 0xa9, 0x72, 0x07, 0xa5, 0x1e, 0x01, 0x4e, 0x36, 0x63, 0xca, 0x1d, 0x2e, 0x27, 0x9b, 0x31,
	0xe5, 0xcf, 0xc0, 0x0e, 0xaf, 0x19, 0xde, 0x07, 0x4b, 0x46, 0x4c, 0xb1, 0xd6, 0x83, 0x2a, 0xa9,
	0x55, 0x4e, 0x46, 0x67, 0x4e, 0xc7, 0x30, 0x08, 0x03, 0x96, 0xf0, 0x38, 0xed, 0xba, 0x11, 0xf5,
	0x39, 0xff, 0xd5, 0x68, 0xfd, 0x9c, 0xfd, 0x57, 0x60, 0x85, 0x87, 0x92, 0xbd, 0x6d, 0xb5, 0x71,
	0xc0, 0xcc, 0x38, 0x53, 0x68, 0x31, 0xa2, 0x58, 0xeb, 0x34, 0x32, 0xc5, 0x54, 0x9d, 0x33, 0x02,
	0xcc, 0x88, 0xc9, 0x28, 0x73, 0xcd, 0xb1, 0x81, 0x19, 0x69, 0xa0, 0xa7, 0x0c, 0x0e, 0x39, 0x3b,
	0xe5, 0xb2, 0xd5, 0xfe, 0x36, 0x6c, 0x45, 0xc8, 0x62, 0x83, 0x21, 0x5d, 0x22, 0xe7, 0x26, 0x18,
	0x69, 0x9e, 0x2c, 0x1b, 0xe8, 0xd2, 0x7f, 0x0f, 0x83, 0xf0, 0x0a, 0xa3, 0xb6, 0x39, 0x57, 0xe6,
	0x46, 0x9b, 0xb9, 0x59, 0x9b, 0xaf, 0xe2, 0xb6, 0x3a, 0xe3, 0x7e, 0x00, 0x76, 0xf8, 0x3c, 0xcf,
	0x66, 0x1b, 0x6f, 0x66, 0x54, 0xf5, 0xf3, 0x1f, 0x83, 0x19, 0x1c, 0x70, 0xd5, 0xba, 0xc6, 0x85,
	0x81, 0x9e, 0x75, 0xca, 0xab, 0xd1, 0x2b, 0xa8, 0xf3, 0x5c, 0xb0, 0xd3, 0xbc, 0x4e, 0x19, 0x81,
	0xff, 0x91, 0x80, 0x19, 0x76, 0x99, 0xb5, 0x85, 0xd0, 0x68, 0x60, 0x74, 0x34, 0x30, 0x1b, 0x0d,
	0x36, 0x89, 0xe2, 0x11, 0x98, 0xc1, 0xd3, 0x38, 0xef, 0xfa, 0x32, 0x4b, 0xd3, 0x7e, 0xd3, 0xb4,
	0xbe, 0x1b, 0x46, 0xf3, 0x6e, 0xbc, 0x03, 0x33, 0xec, 0xf2, 0xe9, 0xb8, 0x77, 0xff, 0x26, 0xd2,
	0x7e, 0xef, 0x36, 0xd9, 0xc6, 0x67, 0x02, 0xdb, 0xe1, 0x31, 0x4b, 0xb8, 0x58, 0xfc, 0xdf, 0x81,
	0xae, 0x9e, 0x0f, 0xa3, 0xf9, 0x7c, 0x8c, 0xc1, 0xc4, 0xcf, 0xda, 0x5c, 0x7f, 0x01, 0x9f, 0x2d,
	0xb8, 0xa4, 0xc8, 0x68, 0xc5, 0x69, 0x9c, 0xa9, 0xe6, 0x1b, 0xa9, 0xd9, 0x27, 0x71, 0xa6, 0x28,
	0x32, 0xfe, 0x7d, 0xb0, 0x03, 0x3d, 0x12, 0xe5, 0x27, 0x42, 0x46, 0x5d, 0xc9, 0xcc, 0xd9, 0x9b,
	0x2a, 0x60, 0xac, 0xfd, 0x23, 0xb0, 0xc3, 0x6b, 0x96, 0xf9, 0xcb, 0xde, 0x7d, 0xec, 0xbd, 0x83,
	0xd3, 0xa1, 0x7a, 0xd5, 0xfd, 0xe0, 0xee, 0xf9, 0x85, 0xd7, 0xfb, 0x7e, 0xe1, 0xf5, 0x2e, 0x2f,
	0x3c, 0xf2, 0xa1, 0xf0, 0xc8, 0x97, 0xc2, 0x23, 0xdf, 0x0a, 0x8f, 0x9c, 0x17, 0x1e, 0xf9, 0x51,
	0x78, 0xe4, 0x57, 0xe1, 0xf5, 0x2e, 0x0b, 0x8f, 0x7c, 0xfa, 0xe9, 0xf5, 0xa6, 0x5b, 0xf8, 0xff,
	0x76, 0xef, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xd7, 0x15, 0x7b, 0x06, 0x07, 0x00, 0x00,
}
