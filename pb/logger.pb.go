// Code generated by protoc-gen-gogo.
// source: logger.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 注册日志
type LogRegist struct {
	Userid   string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Atype    uint32 `protobuf:"varint,4,opt,name=Atype,proto3" json:"Atype,omitempty"`
}

func (m *LogRegist) Reset()                    { *m = LogRegist{} }
func (*LogRegist) ProtoMessage()               {}
func (*LogRegist) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{0} }

func (m *LogRegist) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogRegist) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *LogRegist) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *LogRegist) GetAtype() uint32 {
	if m != nil {
		return m.Atype
	}
	return 0
}

// 登录日志
type LogLogin struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=Ip,proto3" json:"Ip,omitempty"`
	Event  int32  `protobuf:"varint,3,opt,name=Event,proto3" json:"Event,omitempty"`
	Atype  uint32 `protobuf:"varint,4,opt,name=Atype,proto3" json:"Atype,omitempty"`
}

func (m *LogLogin) Reset()                    { *m = LogLogin{} }
func (*LogLogin) ProtoMessage()               {}
func (*LogLogin) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{1} }

func (m *LogLogin) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogLogin) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *LogLogin) GetEvent() int32 {
	if m != nil {
		return m.Event
	}
	return 0
}

func (m *LogLogin) GetAtype() uint32 {
	if m != nil {
		return m.Atype
	}
	return 0
}

// 登出日志
type LogLogout struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Event  int32  `protobuf:"varint,2,opt,name=Event,proto3" json:"Event,omitempty"`
}

func (m *LogLogout) Reset()                    { *m = LogLogout{} }
func (*LogLogout) ProtoMessage()               {}
func (*LogLogout) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{2} }

func (m *LogLogout) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogLogout) GetEvent() int32 {
	if m != nil {
		return m.Event
	}
	return 0
}

// 钻石日志
type LogDiamond struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Num    int32  `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`
	Rest   uint32 `protobuf:"varint,4,opt,name=Rest,proto3" json:"Rest,omitempty"`
}

func (m *LogDiamond) Reset()                    { *m = LogDiamond{} }
func (*LogDiamond) ProtoMessage()               {}
func (*LogDiamond) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{3} }

func (m *LogDiamond) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogDiamond) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogDiamond) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LogDiamond) GetRest() uint32 {
	if m != nil {
		return m.Rest
	}
	return 0
}

// 金币日志
type LogCoin struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Num    int32  `protobuf:"varint,3,opt,name=Num,proto3" json:"Num,omitempty"`
	Rest   uint32 `protobuf:"varint,4,opt,name=Rest,proto3" json:"Rest,omitempty"`
}

func (m *LogCoin) Reset()                    { *m = LogCoin{} }
func (*LogCoin) ProtoMessage()               {}
func (*LogCoin) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{4} }

func (m *LogCoin) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogCoin) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LogCoin) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *LogCoin) GetRest() uint32 {
	if m != nil {
		return m.Rest
	}
	return 0
}

// 绑定日志
type LogBuildAgency struct {
	Userid string `protobuf:"bytes,1,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Agent  string `protobuf:"bytes,2,opt,name=Agent,proto3" json:"Agent,omitempty"`
}

func (m *LogBuildAgency) Reset()                    { *m = LogBuildAgency{} }
func (*LogBuildAgency) ProtoMessage()               {}
func (*LogBuildAgency) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{5} }

func (m *LogBuildAgency) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogBuildAgency) GetAgent() string {
	if m != nil {
		return m.Agent
	}
	return ""
}

// 在线日志
type LogOnline struct {
	Num int32 `protobuf:"varint,1,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (m *LogOnline) Reset()                    { *m = LogOnline{} }
func (*LogOnline) ProtoMessage()               {}
func (*LogOnline) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{6} }

func (m *LogOnline) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

// 做牌日志
type LogSetHand struct {
	Rid      string   `protobuf:"bytes,1,opt,name=Rid,proto3" json:"Rid,omitempty"`
	Round    int32    `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Userid   string   `protobuf:"bytes,3,opt,name=Userid,proto3" json:"Userid,omitempty"`
	Nickname string   `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	SetHands []uint32 `protobuf:"varint,5,rep,packed,name=SetHands" json:"SetHands,omitempty"`
	Hands    []uint32 `protobuf:"varint,6,rep,packed,name=Hands" json:"Hands,omitempty"`
	Niu      int32    `protobuf:"varint,7,opt,name=Niu,proto3" json:"Niu,omitempty"`
	Score    int32    `protobuf:"varint,8,opt,name=Score,proto3" json:"Score,omitempty"`
}

func (m *LogSetHand) Reset()                    { *m = LogSetHand{} }
func (*LogSetHand) ProtoMessage()               {}
func (*LogSetHand) Descriptor() ([]byte, []int) { return fileDescriptorLogger, []int{7} }

func (m *LogSetHand) GetRid() string {
	if m != nil {
		return m.Rid
	}
	return ""
}

func (m *LogSetHand) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *LogSetHand) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *LogSetHand) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *LogSetHand) GetSetHands() []uint32 {
	if m != nil {
		return m.SetHands
	}
	return nil
}

func (m *LogSetHand) GetHands() []uint32 {
	if m != nil {
		return m.Hands
	}
	return nil
}

func (m *LogSetHand) GetNiu() int32 {
	if m != nil {
		return m.Niu
	}
	return 0
}

func (m *LogSetHand) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func init() {
	proto.RegisterType((*LogRegist)(nil), "pb.LogRegist")
	proto.RegisterType((*LogLogin)(nil), "pb.LogLogin")
	proto.RegisterType((*LogLogout)(nil), "pb.LogLogout")
	proto.RegisterType((*LogDiamond)(nil), "pb.LogDiamond")
	proto.RegisterType((*LogCoin)(nil), "pb.LogCoin")
	proto.RegisterType((*LogBuildAgency)(nil), "pb.LogBuildAgency")
	proto.RegisterType((*LogOnline)(nil), "pb.LogOnline")
	proto.RegisterType((*LogSetHand)(nil), "pb.LogSetHand")
}
func (this *LogRegist) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogRegist)
	if !ok {
		that2, ok := that.(LogRegist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Atype != that1.Atype {
		return false
	}
	return true
}
func (this *LogLogin) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogLogin)
	if !ok {
		that2, ok := that.(LogLogin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	if this.Atype != that1.Atype {
		return false
	}
	return true
}
func (this *LogLogout) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogLogout)
	if !ok {
		that2, ok := that.(LogLogout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	return true
}
func (this *LogDiamond) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogDiamond)
	if !ok {
		that2, ok := that.(LogDiamond)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	return true
}
func (this *LogCoin) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogCoin)
	if !ok {
		that2, ok := that.(LogCoin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.Rest != that1.Rest {
		return false
	}
	return true
}
func (this *LogBuildAgency) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogBuildAgency)
	if !ok {
		that2, ok := that.(LogBuildAgency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Agent != that1.Agent {
		return false
	}
	return true
}
func (this *LogOnline) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogOnline)
	if !ok {
		that2, ok := that.(LogOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	return true
}
func (this *LogSetHand) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LogSetHand)
	if !ok {
		that2, ok := that.(LogSetHand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Userid != that1.Userid {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	if len(this.SetHands) != len(that1.SetHands) {
		return false
	}
	for i := range this.SetHands {
		if this.SetHands[i] != that1.SetHands[i] {
			return false
		}
	}
	if len(this.Hands) != len(that1.Hands) {
		return false
	}
	for i := range this.Hands {
		if this.Hands[i] != that1.Hands[i] {
			return false
		}
	}
	if this.Niu != that1.Niu {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	return true
}
func (this *LogRegist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogRegist{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Atype: "+fmt.Sprintf("%#v", this.Atype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogLogin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogLogin{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Ip: "+fmt.Sprintf("%#v", this.Ip)+",\n")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "Atype: "+fmt.Sprintf("%#v", this.Atype)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogLogout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LogLogout{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogDiamond) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogDiamond{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogCoin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.LogCoin{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "Rest: "+fmt.Sprintf("%#v", this.Rest)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogBuildAgency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LogBuildAgency{")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Agent: "+fmt.Sprintf("%#v", this.Agent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LogOnline{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LogSetHand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.LogSetHand{")
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Userid: "+fmt.Sprintf("%#v", this.Userid)+",\n")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "SetHands: "+fmt.Sprintf("%#v", this.SetHands)+",\n")
	s = append(s, "Hands: "+fmt.Sprintf("%#v", this.Hands)+",\n")
	s = append(s, "Niu: "+fmt.Sprintf("%#v", this.Niu)+",\n")
	s = append(s, "Score: "+fmt.Sprintf("%#v", this.Score)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLogger(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LogRegist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRegist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Atype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Atype))
	}
	return i, nil
}

func (m *LogLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLogin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Event != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Event))
	}
	if m.Atype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Atype))
	}
	return i, nil
}

func (m *LogLogout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogLogout) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Event != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Event))
	}
	return i, nil
}

func (m *LogDiamond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogDiamond) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Num))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Rest))
	}
	return i, nil
}

func (m *LogCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogCoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Num))
	}
	if m.Rest != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Rest))
	}
	return i, nil
}

func (m *LogBuildAgency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogBuildAgency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Userid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Agent) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Agent)))
		i += copy(dAtA[i:], m.Agent)
	}
	return i, nil
}

func (m *LogOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogOnline) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *LogSetHand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogSetHand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Rid)))
		i += copy(dAtA[i:], m.Rid)
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Round))
	}
	if len(m.Userid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Userid)))
		i += copy(dAtA[i:], m.Userid)
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLogger(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if len(m.SetHands) > 0 {
		dAtA2 := make([]byte, len(m.SetHands)*10)
		var j1 int
		for _, num := range m.SetHands {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLogger(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Hands) > 0 {
		dAtA4 := make([]byte, len(m.Hands)*10)
		var j3 int
		for _, num := range m.Hands {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintLogger(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Niu != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Niu))
	}
	if m.Score != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLogger(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func encodeFixed64Logger(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Logger(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLogger(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LogRegist) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	if m.Atype != 0 {
		n += 1 + sovLogger(uint64(m.Atype))
	}
	return n
}

func (m *LogLogin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	if m.Event != 0 {
		n += 1 + sovLogger(uint64(m.Event))
	}
	if m.Atype != 0 {
		n += 1 + sovLogger(uint64(m.Atype))
	}
	return n
}

func (m *LogLogout) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	if m.Event != 0 {
		n += 1 + sovLogger(uint64(m.Event))
	}
	return n
}

func (m *LogDiamond) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLogger(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovLogger(uint64(m.Num))
	}
	if m.Rest != 0 {
		n += 1 + sovLogger(uint64(m.Rest))
	}
	return n
}

func (m *LogCoin) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovLogger(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovLogger(uint64(m.Num))
	}
	if m.Rest != 0 {
		n += 1 + sovLogger(uint64(m.Rest))
	}
	return n
}

func (m *LogBuildAgency) Size() (n int) {
	var l int
	_ = l
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	l = len(m.Agent)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	return n
}

func (m *LogOnline) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovLogger(uint64(m.Num))
	}
	return n
}

func (m *LogSetHand) Size() (n int) {
	var l int
	_ = l
	l = len(m.Rid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	if m.Round != 0 {
		n += 1 + sovLogger(uint64(m.Round))
	}
	l = len(m.Userid)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovLogger(uint64(l))
	}
	if len(m.SetHands) > 0 {
		l = 0
		for _, e := range m.SetHands {
			l += sovLogger(uint64(e))
		}
		n += 1 + sovLogger(uint64(l)) + l
	}
	if len(m.Hands) > 0 {
		l = 0
		for _, e := range m.Hands {
			l += sovLogger(uint64(e))
		}
		n += 1 + sovLogger(uint64(l)) + l
	}
	if m.Niu != 0 {
		n += 1 + sovLogger(uint64(m.Niu))
	}
	if m.Score != 0 {
		n += 1 + sovLogger(uint64(m.Score))
	}
	return n
}

func sovLogger(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogger(x uint64) (n int) {
	return sovLogger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LogRegist) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogRegist{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Atype:` + fmt.Sprintf("%v", this.Atype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogLogin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogLogin{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`Atype:` + fmt.Sprintf("%v", this.Atype) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogLogout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogLogout{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogDiamond) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogDiamond{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogCoin) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogCoin{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Rest:` + fmt.Sprintf("%v", this.Rest) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogBuildAgency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogBuildAgency{`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Agent:` + fmt.Sprintf("%v", this.Agent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogOnline{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogSetHand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogSetHand{`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Userid:` + fmt.Sprintf("%v", this.Userid) + `,`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`SetHands:` + fmt.Sprintf("%v", this.SetHands) + `,`,
		`Hands:` + fmt.Sprintf("%v", this.Hands) + `,`,
		`Niu:` + fmt.Sprintf("%v", this.Niu) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLogger(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LogRegist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRegist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRegist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atype", wireType)
			}
			m.Atype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atype", wireType)
			}
			m.Atype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Atype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogLogout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogLogout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogLogout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogDiamond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogDiamond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogDiamond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rest", wireType)
			}
			m.Rest = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rest |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogBuildAgency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogBuildAgency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogBuildAgency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Agent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogSetHand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogSetHand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogSetHand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogger
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SetHands = append(m.SetHands, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogger
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLogger
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogger
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SetHands = append(m.SetHands, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SetHands", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogger
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Hands = append(m.Hands, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogger
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLogger
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogger
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Hands = append(m.Hands, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Hands", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Niu", wireType)
			}
			m.Niu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Niu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLogger
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogger
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogger(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogger = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogger   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("logger.proto", fileDescriptorLogger) }

var fileDescriptorLogger = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xbd, 0x6a, 0xe3, 0x40,
	0x14, 0x85, 0x35, 0x92, 0x7f, 0xe4, 0x61, 0x6d, 0x16, 0xb1, 0x2c, 0xc2, 0xb0, 0x83, 0x51, 0xe5,
	0x62, 0xd9, 0x66, 0xab, 0x6d, 0x16, 0xec, 0xdd, 0x85, 0x35, 0x08, 0x07, 0xc6, 0x49, 0x15, 0x30,
	0xd8, 0xd6, 0x30, 0x0c, 0xb1, 0xe7, 0x0a, 0xfd, 0x04, 0xdc, 0xe5, 0x11, 0xf2, 0x18, 0x79, 0x8e,
	0x54, 0x29, 0x5d, 0xa6, 0x8c, 0x95, 0x26, 0xa5, 0x1f, 0x21, 0xcc, 0x8c, 0x22, 0x4c, 0x40, 0x2e,
	0xd2, 0xdd, 0xa3, 0xb9, 0xf3, 0x9d, 0x73, 0x2f, 0x23, 0xfc, 0x69, 0x0d, 0x9c, 0xb3, 0xe4, 0x47,
	0x9c, 0x40, 0x06, 0x9e, 0x1d, 0x2f, 0x03, 0x86, 0x3b, 0x21, 0x70, 0xca, 0xb8, 0x48, 0x33, 0xef,
	0x2b, 0x6e, 0x5d, 0xa4, 0x2c, 0x11, 0x91, 0x8f, 0x06, 0x68, 0xd8, 0xa1, 0xa5, 0xf2, 0xfa, 0xd8,
	0x9d, 0x8a, 0xd5, 0x95, 0x5c, 0x6c, 0x98, 0x6f, 0xeb, 0x93, 0x4a, 0x7b, 0x3d, 0x6c, 0x4f, 0x62,
	0xdf, 0xd1, 0x5f, 0xed, 0x49, 0xec, 0x7d, 0xc1, 0xcd, 0x51, 0xb6, 0x8d, 0x99, 0xdf, 0x18, 0xa0,
	0x61, 0x97, 0x1a, 0x11, 0xcc, 0xb1, 0x1b, 0x02, 0x0f, 0x81, 0x0b, 0x59, 0xeb, 0x62, 0x48, 0xf6,
	0x31, 0xe9, 0xdf, 0x35, 0x93, 0x99, 0x86, 0x37, 0xa9, 0x11, 0x35, 0xfc, 0x5f, 0x7a, 0x8c, 0x10,
	0x38, 0xe4, 0xf5, 0x63, 0x54, 0x40, 0xfb, 0x08, 0x18, 0xcc, 0x31, 0x0e, 0x81, 0xff, 0x15, 0x8b,
	0x0d, 0xc8, 0xa8, 0xf6, 0xae, 0x87, 0x1b, 0xe7, 0xca, 0xd5, 0x5c, 0xd5, 0xb5, 0xf7, 0x19, 0x3b,
	0xd3, 0x7c, 0x53, 0xc6, 0x53, 0xa5, 0xea, 0xa2, 0x2c, 0xcd, 0xca, 0x6c, 0xba, 0x0e, 0x2e, 0x71,
	0x3b, 0x04, 0xfe, 0x07, 0x4e, 0x4c, 0xfe, 0x71, 0xf8, 0x6f, 0xdc, 0x0b, 0x81, 0x8f, 0x73, 0xb1,
	0x8e, 0x46, 0x9c, 0xc9, 0xd5, 0xf6, 0xd4, 0xf0, 0xaa, 0x23, 0x2b, 0x17, 0x6c, 0x44, 0xf0, 0x4d,
	0xef, 0xed, 0x4c, 0xae, 0x85, 0xac, 0x2c, 0x51, 0x65, 0x19, 0xdc, 0x23, 0xbd, 0x9c, 0x19, 0xcb,
	0xfe, 0x2f, 0x64, 0xa4, 0x1a, 0x68, 0x05, 0x56, 0xa5, 0xa2, 0x52, 0xc8, 0x65, 0xf4, 0xb6, 0x52,
	0x2d, 0x8e, 0x32, 0x38, 0xb5, 0xef, 0xa8, 0xf1, 0xee, 0x1d, 0xf5, 0xb1, 0x5b, 0xda, 0xa4, 0x7e,
	0x73, 0xe0, 0x0c, 0xbb, 0xb4, 0xd2, 0xca, 0xc5, 0x1c, 0xb4, 0xf4, 0x81, 0x11, 0x3a, 0xae, 0xc8,
	0xfd, 0x76, 0x19, 0x57, 0xe4, 0xaa, 0x6f, 0xb6, 0x82, 0x84, 0xf9, 0xae, 0x49, 0xa3, 0xc5, 0xf8,
	0xfb, 0x6e, 0x4f, 0xac, 0xc7, 0x3d, 0xb1, 0x0e, 0x7b, 0x82, 0x6e, 0x0a, 0x82, 0xee, 0x0a, 0x82,
	0x1e, 0x0a, 0x82, 0x76, 0x05, 0x41, 0x4f, 0x05, 0x41, 0x2f, 0x05, 0xb1, 0x0e, 0x05, 0x41, 0xb7,
	0xcf, 0xc4, 0x5a, 0xb6, 0xf4, 0xbf, 0xf1, 0xf3, 0x35, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x1c, 0x2e,
	0x3a, 0x2b, 0x03, 0x00, 0x00,
}
