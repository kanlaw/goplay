// Code generated by protoc-gen-gogo.
// source: phz.proto
// DO NOT EDIT!

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入房间
type CEnterZiRoom struct {
	Code       uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Invitecode string `protobuf:"bytes,2,opt,name=invitecode,proto3" json:"invitecode,omitempty"`
	Id         string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Dan        bool   `protobuf:"varint,4,opt,name=dan,proto3" json:"dan,omitempty"`
}

func (m *CEnterZiRoom) Reset()                    { *m = CEnterZiRoom{} }
func (*CEnterZiRoom) ProtoMessage()               {}
func (*CEnterZiRoom) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{0} }

func (m *CEnterZiRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CEnterZiRoom) GetInvitecode() string {
	if m != nil {
		return m.Invitecode
	}
	return ""
}

func (m *CEnterZiRoom) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CEnterZiRoom) GetDan() bool {
	if m != nil {
		return m.Dan
	}
	return false
}

type SEnterZiRoom struct {
	Code     uint32      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Roominfo *RoomData   `protobuf:"bytes,2,opt,name=roominfo" json:"roominfo,omitempty"`
	Userinfo []*RoomUser `protobuf:"bytes,3,rep,name=userinfo" json:"userinfo,omitempty"`
	Voteinfo *RoomVote   `protobuf:"bytes,4,opt,name=voteinfo" json:"voteinfo,omitempty"`
	Cardinfo []*RoomCard `protobuf:"bytes,5,rep,name=cardinfo" json:"cardinfo,omitempty"`
	Error    ErrCode     `protobuf:"varint,6,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SEnterZiRoom) Reset()                    { *m = SEnterZiRoom{} }
func (*SEnterZiRoom) ProtoMessage()               {}
func (*SEnterZiRoom) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{1} }

func (m *SEnterZiRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SEnterZiRoom) GetRoominfo() *RoomData {
	if m != nil {
		return m.Roominfo
	}
	return nil
}

func (m *SEnterZiRoom) GetUserinfo() []*RoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func (m *SEnterZiRoom) GetVoteinfo() *RoomVote {
	if m != nil {
		return m.Voteinfo
	}
	return nil
}

func (m *SEnterZiRoom) GetCardinfo() []*RoomCard {
	if m != nil {
		return m.Cardinfo
	}
	return nil
}

func (m *SEnterZiRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 创建房间
type CCreateZiRoom struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Rname   string `protobuf:"bytes,2,opt,name=rname,proto3" json:"rname,omitempty"`
	Rtype   uint32 `protobuf:"varint,3,opt,name=rtype,proto3" json:"rtype,omitempty"`
	Ante    uint32 `protobuf:"varint,4,opt,name=ante,proto3" json:"ante,omitempty"`
	Round   uint32 `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Payment uint32 `protobuf:"varint,6,opt,name=payment,proto3" json:"payment,omitempty"`
	Count   uint32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Chat    uint32 `protobuf:"varint,8,opt,name=chat,proto3" json:"chat,omitempty"`
	Xi      uint32 `protobuf:"varint,9,opt,name=xi,proto3" json:"xi,omitempty"`
}

func (m *CCreateZiRoom) Reset()                    { *m = CCreateZiRoom{} }
func (*CCreateZiRoom) ProtoMessage()               {}
func (*CCreateZiRoom) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{2} }

func (m *CCreateZiRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CCreateZiRoom) GetRname() string {
	if m != nil {
		return m.Rname
	}
	return ""
}

func (m *CCreateZiRoom) GetRtype() uint32 {
	if m != nil {
		return m.Rtype
	}
	return 0
}

func (m *CCreateZiRoom) GetAnte() uint32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *CCreateZiRoom) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CCreateZiRoom) GetPayment() uint32 {
	if m != nil {
		return m.Payment
	}
	return 0
}

func (m *CCreateZiRoom) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CCreateZiRoom) GetChat() uint32 {
	if m != nil {
		return m.Chat
	}
	return 0
}

func (m *CCreateZiRoom) GetXi() uint32 {
	if m != nil {
		return m.Xi
	}
	return 0
}

// 返回房间数据,
type SCreateZiRoom struct {
	Code  uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Rdata *RoomData `protobuf:"bytes,2,opt,name=rdata" json:"rdata,omitempty"`
	Error ErrCode   `protobuf:"varint,3,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SCreateZiRoom) Reset()                    { *m = SCreateZiRoom{} }
func (*SCreateZiRoom) ProtoMessage()               {}
func (*SCreateZiRoom) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{3} }

func (m *SCreateZiRoom) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SCreateZiRoom) GetRdata() *RoomData {
	if m != nil {
		return m.Rdata
	}
	return nil
}

func (m *SCreateZiRoom) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 其他玩家进入房间
type SZiCamein struct {
	Code     uint32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Userinfo *RoomUser `protobuf:"bytes,2,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *SZiCamein) Reset()                    { *m = SZiCamein{} }
func (*SZiCamein) ProtoMessage()               {}
func (*SZiCamein) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{4} }

func (m *SZiCamein) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SZiCamein) GetUserinfo() *RoomUser {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

// 结算广播接口，游戏结束
type SZiGameover struct {
	Code      uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Dealer    uint32        `protobuf:"varint,2,opt,name=dealer,proto3" json:"dealer,omitempty"`
	Seat      uint32        `protobuf:"varint,3,opt,name=seat,proto3" json:"seat,omitempty"`
	Value     uint32        `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Round     uint32        `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Xi        uint32        `protobuf:"varint,6,opt,name=xi,proto3" json:"xi,omitempty"`
	Fan       uint32        `protobuf:"varint,7,opt,name=fan,proto3" json:"fan,omitempty"`
	Deng      uint32        `protobuf:"varint,8,opt,name=deng,proto3" json:"deng,omitempty"`
	Di        uint32        `protobuf:"varint,9,opt,name=di,proto3" json:"di,omitempty"`
	Seats     []*RoomSeat   `protobuf:"bytes,10,rep,name=seats" json:"seats,omitempty"`
	Cards     []*RoomCard   `protobuf:"bytes,11,rep,name=cards" json:"cards,omitempty"`
	List      []*ZiRoomOver `protobuf:"bytes,12,rep,name=list" json:"list,omitempty"`
	Lastcards []uint32      `protobuf:"varint,13,rep,packed,name=lastcards" json:"lastcards,omitempty"`
	Combat    []*DanOver    `protobuf:"bytes,14,rep,name=combat" json:"combat,omitempty"`
}

func (m *SZiGameover) Reset()                    { *m = SZiGameover{} }
func (*SZiGameover) ProtoMessage()               {}
func (*SZiGameover) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{5} }

func (m *SZiGameover) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SZiGameover) GetDealer() uint32 {
	if m != nil {
		return m.Dealer
	}
	return 0
}

func (m *SZiGameover) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SZiGameover) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SZiGameover) GetRound() uint32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *SZiGameover) GetXi() uint32 {
	if m != nil {
		return m.Xi
	}
	return 0
}

func (m *SZiGameover) GetFan() uint32 {
	if m != nil {
		return m.Fan
	}
	return 0
}

func (m *SZiGameover) GetDeng() uint32 {
	if m != nil {
		return m.Deng
	}
	return 0
}

func (m *SZiGameover) GetDi() uint32 {
	if m != nil {
		return m.Di
	}
	return 0
}

func (m *SZiGameover) GetSeats() []*RoomSeat {
	if m != nil {
		return m.Seats
	}
	return nil
}

func (m *SZiGameover) GetCards() []*RoomCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SZiGameover) GetList() []*ZiRoomOver {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SZiGameover) GetLastcards() []uint32 {
	if m != nil {
		return m.Lastcards
	}
	return nil
}

func (m *SZiGameover) GetCombat() []*DanOver {
	if m != nil {
		return m.Combat
	}
	return nil
}

// 个人牌局记录,默认最近30场
type CZiGameRecord struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Page uint32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *CZiGameRecord) Reset()                    { *m = CZiGameRecord{} }
func (*CZiGameRecord) ProtoMessage()               {}
func (*CZiGameRecord) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{6} }

func (m *CZiGameRecord) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CZiGameRecord) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type SZiGameRecord struct {
	Code uint32          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	List []*ZiRecordList `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *SZiGameRecord) Reset()                    { *m = SZiGameRecord{} }
func (*SZiGameRecord) ProtoMessage()               {}
func (*SZiGameRecord) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{7} }

func (m *SZiGameRecord) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SZiGameRecord) GetList() []*ZiRecordList {
	if m != nil {
		return m.List
	}
	return nil
}

// 发牌
type SPushDeal struct {
	Code  uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Cards []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *SPushDeal) Reset()                    { *m = SPushDeal{} }
func (*SPushDeal) ProtoMessage()               {}
func (*SPushDeal) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{8} }

func (m *SPushDeal) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushDeal) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushDeal) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 庄家发牌
type SPushDealerDeal struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SPushDealerDeal) Reset()                    { *m = SPushDealerDeal{} }
func (*SPushDealerDeal) ProtoMessage()               {}
func (*SPushDealerDeal) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{9} }

func (m *SPushDealerDeal) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushDealerDeal) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushDealerDeal) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SPushDealerDeal) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 庄家补牌
type SPushDealerBu struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SPushDealerBu) Reset()                    { *m = SPushDealerBu{} }
func (*SPushDealerBu) ProtoMessage()               {}
func (*SPushDealerBu) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{10} }

func (m *SPushDealerBu) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushDealerBu) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushDealerBu) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SPushDealerBu) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 闲家跑胡
type SPushPaoHu struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SPushPaoHu) Reset()                    { *m = SPushPaoHu{} }
func (*SPushPaoHu) ProtoMessage()               {}
func (*SPushPaoHu) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{11} }

func (m *SPushPaoHu) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushPaoHu) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushPaoHu) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SPushPaoHu) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 摸牌
type SPushDraw struct {
	Code  uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32   `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32   `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Count uint32   `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Cards []uint32 `protobuf:"varint,6,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *SPushDraw) Reset()                    { *m = SPushDraw{} }
func (*SPushDraw) ProtoMessage()               {}
func (*SPushDraw) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{12} }

func (m *SPushDraw) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushDraw) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushDraw) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SPushDraw) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SPushDraw) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SPushDraw) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 打牌
type CPushDiscard struct {
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Card uint32 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`
}

func (m *CPushDiscard) Reset()                    { *m = CPushDiscard{} }
func (*CPushDiscard) ProtoMessage()               {}
func (*CPushDiscard) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{13} }

func (m *CPushDiscard) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CPushDiscard) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

// 打牌
type SPushDiscard struct {
	Code  uint32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32  `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	Error ErrCode `protobuf:"varint,5,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SPushDiscard) Reset()                    { *m = SPushDiscard{} }
func (*SPushDiscard) ProtoMessage()               {}
func (*SPushDiscard) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{14} }

func (m *SPushDiscard) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushDiscard) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushDiscard) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SPushDiscard) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SPushDiscard) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 自动操作(提,跑,偎)
type SPushAuto struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat  uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Card  uint32 `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Value uint32 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SPushAuto) Reset()                    { *m = SPushAuto{} }
func (*SPushAuto) ProtoMessage()               {}
func (*SPushAuto) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{15} }

func (m *SPushAuto) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushAuto) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushAuto) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SPushAuto) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 玩家吃,碰,胡操作
type COperate struct {
	Code  uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Value uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Cards []uint32 `protobuf:"varint,3,rep,packed,name=cards" json:"cards,omitempty"`
	Bione []uint32 `protobuf:"varint,4,rep,packed,name=bione" json:"bione,omitempty"`
	Bitwo []uint32 `protobuf:"varint,5,rep,packed,name=bitwo" json:"bitwo,omitempty"`
}

func (m *COperate) Reset()                    { *m = COperate{} }
func (*COperate) ProtoMessage()               {}
func (*COperate) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{16} }

func (m *COperate) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *COperate) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *COperate) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *COperate) GetBione() []uint32 {
	if m != nil {
		return m.Bione
	}
	return nil
}

func (m *COperate) GetBitwo() []uint32 {
	if m != nil {
		return m.Bitwo
	}
	return nil
}

type SOperate struct {
	Code   uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat   uint32   `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Beseat uint32   `protobuf:"varint,3,opt,name=beseat,proto3" json:"beseat,omitempty"`
	Card   uint32   `protobuf:"varint,4,opt,name=card,proto3" json:"card,omitempty"`
	Value  uint32   `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Cards  []uint32 `protobuf:"varint,6,rep,packed,name=cards" json:"cards,omitempty"`
	Bione  []uint32 `protobuf:"varint,7,rep,packed,name=bione" json:"bione,omitempty"`
	Bitwo  []uint32 `protobuf:"varint,8,rep,packed,name=bitwo" json:"bitwo,omitempty"`
	Error  ErrCode  `protobuf:"varint,9,opt,name=error,proto3,enum=pb.ErrCode" json:"error,omitempty"`
}

func (m *SOperate) Reset()                    { *m = SOperate{} }
func (*SOperate) ProtoMessage()               {}
func (*SOperate) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{17} }

func (m *SOperate) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SOperate) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SOperate) GetBeseat() uint32 {
	if m != nil {
		return m.Beseat
	}
	return 0
}

func (m *SOperate) GetCard() uint32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *SOperate) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SOperate) GetCards() []uint32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *SOperate) GetBione() []uint32 {
	if m != nil {
		return m.Bione
	}
	return nil
}

func (m *SOperate) GetBitwo() []uint32 {
	if m != nil {
		return m.Bitwo
	}
	return nil
}

func (m *SOperate) GetError() ErrCode {
	if m != nil {
		return m.Error
	}
	return OK
}

// 房间状态
type SPushStatus struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Seat   uint32 `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`
	Status int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *SPushStatus) Reset()                    { *m = SPushStatus{} }
func (*SPushStatus) ProtoMessage()               {}
func (*SPushStatus) Descriptor() ([]byte, []int) { return fileDescriptorPhz, []int{18} }

func (m *SPushStatus) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SPushStatus) GetSeat() uint32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SPushStatus) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*CEnterZiRoom)(nil), "pb.CEnterZiRoom")
	proto.RegisterType((*SEnterZiRoom)(nil), "pb.SEnterZiRoom")
	proto.RegisterType((*CCreateZiRoom)(nil), "pb.CCreateZiRoom")
	proto.RegisterType((*SCreateZiRoom)(nil), "pb.SCreateZiRoom")
	proto.RegisterType((*SZiCamein)(nil), "pb.SZiCamein")
	proto.RegisterType((*SZiGameover)(nil), "pb.SZiGameover")
	proto.RegisterType((*CZiGameRecord)(nil), "pb.CZiGameRecord")
	proto.RegisterType((*SZiGameRecord)(nil), "pb.SZiGameRecord")
	proto.RegisterType((*SPushDeal)(nil), "pb.SPushDeal")
	proto.RegisterType((*SPushDealerDeal)(nil), "pb.SPushDealerDeal")
	proto.RegisterType((*SPushDealerBu)(nil), "pb.SPushDealerBu")
	proto.RegisterType((*SPushPaoHu)(nil), "pb.SPushPaoHu")
	proto.RegisterType((*SPushDraw)(nil), "pb.SPushDraw")
	proto.RegisterType((*CPushDiscard)(nil), "pb.CPushDiscard")
	proto.RegisterType((*SPushDiscard)(nil), "pb.SPushDiscard")
	proto.RegisterType((*SPushAuto)(nil), "pb.SPushAuto")
	proto.RegisterType((*COperate)(nil), "pb.COperate")
	proto.RegisterType((*SOperate)(nil), "pb.SOperate")
	proto.RegisterType((*SPushStatus)(nil), "pb.SPushStatus")
}
func (this *CEnterZiRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CEnterZiRoom)
	if !ok {
		that2, ok := that.(CEnterZiRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Invitecode != that1.Invitecode {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Dan != that1.Dan {
		return false
	}
	return true
}
func (this *SEnterZiRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SEnterZiRoom)
	if !ok {
		that2, ok := that.(SEnterZiRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Roominfo.Equal(that1.Roominfo) {
		return false
	}
	if len(this.Userinfo) != len(that1.Userinfo) {
		return false
	}
	for i := range this.Userinfo {
		if !this.Userinfo[i].Equal(that1.Userinfo[i]) {
			return false
		}
	}
	if !this.Voteinfo.Equal(that1.Voteinfo) {
		return false
	}
	if len(this.Cardinfo) != len(that1.Cardinfo) {
		return false
	}
	for i := range this.Cardinfo {
		if !this.Cardinfo[i].Equal(that1.Cardinfo[i]) {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *CCreateZiRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CCreateZiRoom)
	if !ok {
		that2, ok := that.(CCreateZiRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Rname != that1.Rname {
		return false
	}
	if this.Rtype != that1.Rtype {
		return false
	}
	if this.Ante != that1.Ante {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Payment != that1.Payment {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.Chat != that1.Chat {
		return false
	}
	if this.Xi != that1.Xi {
		return false
	}
	return true
}
func (this *SCreateZiRoom) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SCreateZiRoom)
	if !ok {
		that2, ok := that.(SCreateZiRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Rdata.Equal(that1.Rdata) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SZiCamein) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SZiCamein)
	if !ok {
		that2, ok := that.(SZiCamein)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !this.Userinfo.Equal(that1.Userinfo) {
		return false
	}
	return true
}
func (this *SZiGameover) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SZiGameover)
	if !ok {
		that2, ok := that.(SZiGameover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Dealer != that1.Dealer {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Round != that1.Round {
		return false
	}
	if this.Xi != that1.Xi {
		return false
	}
	if this.Fan != that1.Fan {
		return false
	}
	if this.Deng != that1.Deng {
		return false
	}
	if this.Di != that1.Di {
		return false
	}
	if len(this.Seats) != len(that1.Seats) {
		return false
	}
	for i := range this.Seats {
		if !this.Seats[i].Equal(that1.Seats[i]) {
			return false
		}
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if !this.Cards[i].Equal(that1.Cards[i]) {
			return false
		}
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	if len(this.Lastcards) != len(that1.Lastcards) {
		return false
	}
	for i := range this.Lastcards {
		if this.Lastcards[i] != that1.Lastcards[i] {
			return false
		}
	}
	if len(this.Combat) != len(that1.Combat) {
		return false
	}
	for i := range this.Combat {
		if !this.Combat[i].Equal(that1.Combat[i]) {
			return false
		}
	}
	return true
}
func (this *CZiGameRecord) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CZiGameRecord)
	if !ok {
		that2, ok := that.(CZiGameRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *SZiGameRecord) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SZiGameRecord)
	if !ok {
		that2, ok := that.(SZiGameRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *SPushDeal) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushDeal)
	if !ok {
		that2, ok := that.(SPushDeal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *SPushDealerDeal) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushDealerDeal)
	if !ok {
		that2, ok := that.(SPushDealerDeal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SPushDealerBu) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushDealerBu)
	if !ok {
		that2, ok := that.(SPushDealerBu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SPushPaoHu) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushPaoHu)
	if !ok {
		that2, ok := that.(SPushPaoHu)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SPushDraw) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushDraw)
	if !ok {
		that2, ok := that.(SPushDraw)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	return true
}
func (this *CPushDiscard) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CPushDiscard)
	if !ok {
		that2, ok := that.(CPushDiscard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	return true
}
func (this *SPushDiscard) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushDiscard)
	if !ok {
		that2, ok := that.(SPushDiscard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SPushAuto) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushAuto)
	if !ok {
		that2, ok := that.(SPushAuto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *COperate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*COperate)
	if !ok {
		that2, ok := that.(COperate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if len(this.Bione) != len(that1.Bione) {
		return false
	}
	for i := range this.Bione {
		if this.Bione[i] != that1.Bione[i] {
			return false
		}
	}
	if len(this.Bitwo) != len(that1.Bitwo) {
		return false
	}
	for i := range this.Bitwo {
		if this.Bitwo[i] != that1.Bitwo[i] {
			return false
		}
	}
	return true
}
func (this *SOperate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SOperate)
	if !ok {
		that2, ok := that.(SOperate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Beseat != that1.Beseat {
		return false
	}
	if this.Card != that1.Card {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if this.Cards[i] != that1.Cards[i] {
			return false
		}
	}
	if len(this.Bione) != len(that1.Bione) {
		return false
	}
	for i := range this.Bione {
		if this.Bione[i] != that1.Bione[i] {
			return false
		}
	}
	if len(this.Bitwo) != len(that1.Bitwo) {
		return false
	}
	for i := range this.Bitwo {
		if this.Bitwo[i] != that1.Bitwo[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SPushStatus) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SPushStatus)
	if !ok {
		that2, ok := that.(SPushStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Seat != that1.Seat {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *CEnterZiRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.CEnterZiRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Invitecode: "+fmt.Sprintf("%#v", this.Invitecode)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Dan: "+fmt.Sprintf("%#v", this.Dan)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SEnterZiRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.SEnterZiRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Roominfo != nil {
		s = append(s, "Roominfo: "+fmt.Sprintf("%#v", this.Roominfo)+",\n")
	}
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	if this.Voteinfo != nil {
		s = append(s, "Voteinfo: "+fmt.Sprintf("%#v", this.Voteinfo)+",\n")
	}
	if this.Cardinfo != nil {
		s = append(s, "Cardinfo: "+fmt.Sprintf("%#v", this.Cardinfo)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CCreateZiRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.CCreateZiRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Rname: "+fmt.Sprintf("%#v", this.Rname)+",\n")
	s = append(s, "Rtype: "+fmt.Sprintf("%#v", this.Rtype)+",\n")
	s = append(s, "Ante: "+fmt.Sprintf("%#v", this.Ante)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Payment: "+fmt.Sprintf("%#v", this.Payment)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Chat: "+fmt.Sprintf("%#v", this.Chat)+",\n")
	s = append(s, "Xi: "+fmt.Sprintf("%#v", this.Xi)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCreateZiRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SCreateZiRoom{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Rdata != nil {
		s = append(s, "Rdata: "+fmt.Sprintf("%#v", this.Rdata)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SZiCamein) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SZiCamein{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.Userinfo != nil {
		s = append(s, "Userinfo: "+fmt.Sprintf("%#v", this.Userinfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SZiGameover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&pb.SZiGameover{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Dealer: "+fmt.Sprintf("%#v", this.Dealer)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Round: "+fmt.Sprintf("%#v", this.Round)+",\n")
	s = append(s, "Xi: "+fmt.Sprintf("%#v", this.Xi)+",\n")
	s = append(s, "Fan: "+fmt.Sprintf("%#v", this.Fan)+",\n")
	s = append(s, "Deng: "+fmt.Sprintf("%#v", this.Deng)+",\n")
	s = append(s, "Di: "+fmt.Sprintf("%#v", this.Di)+",\n")
	if this.Seats != nil {
		s = append(s, "Seats: "+fmt.Sprintf("%#v", this.Seats)+",\n")
	}
	if this.Cards != nil {
		s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	}
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "Lastcards: "+fmt.Sprintf("%#v", this.Lastcards)+",\n")
	if this.Combat != nil {
		s = append(s, "Combat: "+fmt.Sprintf("%#v", this.Combat)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CZiGameRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CZiGameRecord{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SZiGameRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SZiGameRecord{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.List != nil {
		s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushDeal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SPushDeal{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushDealerDeal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SPushDealerDeal{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushDealerBu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SPushDealerBu{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushPaoHu) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SPushPaoHu{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushDraw) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.SPushDraw{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CPushDiscard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CPushDiscard{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushDiscard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.SPushDiscard{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushAuto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SPushAuto{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *COperate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.COperate{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Bione: "+fmt.Sprintf("%#v", this.Bione)+",\n")
	s = append(s, "Bitwo: "+fmt.Sprintf("%#v", this.Bitwo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SOperate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.SOperate{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Beseat: "+fmt.Sprintf("%#v", this.Beseat)+",\n")
	s = append(s, "Card: "+fmt.Sprintf("%#v", this.Card)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	s = append(s, "Bione: "+fmt.Sprintf("%#v", this.Bione)+",\n")
	s = append(s, "Bitwo: "+fmt.Sprintf("%#v", this.Bitwo)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SPushStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SPushStatus{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Seat: "+fmt.Sprintf("%#v", this.Seat)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPhz(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CEnterZiRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEnterZiRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if len(m.Invitecode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhz(dAtA, i, uint64(len(m.Invitecode)))
		i += copy(dAtA[i:], m.Invitecode)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPhz(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Dan {
		dAtA[i] = 0x20
		i++
		if m.Dan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SEnterZiRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SEnterZiRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Roominfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Roominfo.Size()))
		n1, err := m.Roominfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Userinfo) > 0 {
		for _, msg := range m.Userinfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPhz(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Voteinfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Voteinfo.Size()))
		n2, err := m.Voteinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Cardinfo) > 0 {
		for _, msg := range m.Cardinfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintPhz(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *CCreateZiRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCreateZiRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if len(m.Rname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhz(dAtA, i, uint64(len(m.Rname)))
		i += copy(dAtA[i:], m.Rname)
	}
	if m.Rtype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Rtype))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Ante))
	}
	if m.Round != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Round))
	}
	if m.Payment != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Payment))
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Count))
	}
	if m.Chat != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Chat))
	}
	if m.Xi != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Xi))
	}
	return i, nil
}

func (m *SCreateZiRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCreateZiRoom) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Rdata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Rdata.Size()))
		n3, err := m.Rdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Error != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SZiCamein) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SZiCamein) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Userinfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Userinfo.Size()))
		n4, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *SZiGameover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SZiGameover) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Dealer != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Dealer))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	if m.Round != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Round))
	}
	if m.Xi != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Xi))
	}
	if m.Fan != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Fan))
	}
	if m.Deng != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Deng))
	}
	if m.Di != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Di))
	}
	if len(m.Seats) > 0 {
		for _, msg := range m.Seats {
			dAtA[i] = 0x52
			i++
			i = encodeVarintPhz(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintPhz(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x62
			i++
			i = encodeVarintPhz(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Lastcards) > 0 {
		dAtA6 := make([]byte, len(m.Lastcards)*10)
		var j5 int
		for _, num := range m.Lastcards {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Combat) > 0 {
		for _, msg := range m.Combat {
			dAtA[i] = 0x72
			i++
			i = encodeVarintPhz(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CZiGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CZiGameRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *SZiGameRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SZiGameRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPhz(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SPushDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushDeal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		dAtA8 := make([]byte, len(m.Cards)*10)
		var j7 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *SPushDealerDeal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushDealerDeal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SPushDealerBu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushDealerBu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SPushPaoHu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushPaoHu) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *SPushDraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushDraw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	if m.Count != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Count))
	}
	if len(m.Cards) > 0 {
		dAtA10 := make([]byte, len(m.Cards)*10)
		var j9 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func (m *CPushDiscard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPushDiscard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Card != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	return i, nil
}

func (m *SPushDiscard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushDiscard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	if m.Error != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SPushAuto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushAuto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *COperate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *COperate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		dAtA12 := make([]byte, len(m.Cards)*10)
		var j11 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if len(m.Bione) > 0 {
		dAtA14 := make([]byte, len(m.Bione)*10)
		var j13 int
		for _, num := range m.Bione {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if len(m.Bitwo) > 0 {
		dAtA16 := make([]byte, len(m.Bitwo)*10)
		var j15 int
		for _, num := range m.Bitwo {
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	return i, nil
}

func (m *SOperate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SOperate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Beseat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Beseat))
	}
	if m.Card != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Card))
	}
	if m.Value != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		dAtA18 := make([]byte, len(m.Cards)*10)
		var j17 int
		for _, num := range m.Cards {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if len(m.Bione) > 0 {
		dAtA20 := make([]byte, len(m.Bione)*10)
		var j19 int
		for _, num := range m.Bione {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	if len(m.Bitwo) > 0 {
		dAtA22 := make([]byte, len(m.Bitwo)*10)
		var j21 int
		for _, num := range m.Bitwo {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintPhz(dAtA, i, uint64(j21))
		i += copy(dAtA[i:], dAtA22[:j21])
	}
	if m.Error != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *SPushStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPushStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Code))
	}
	if m.Seat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Seat))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPhz(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeFixed64Phz(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Phz(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPhz(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CEnterZiRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	l = len(m.Invitecode)
	if l > 0 {
		n += 1 + l + sovPhz(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPhz(uint64(l))
	}
	if m.Dan {
		n += 2
	}
	return n
}

func (m *SEnterZiRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Roominfo != nil {
		l = m.Roominfo.Size()
		n += 1 + l + sovPhz(uint64(l))
	}
	if len(m.Userinfo) > 0 {
		for _, e := range m.Userinfo {
			l = e.Size()
			n += 1 + l + sovPhz(uint64(l))
		}
	}
	if m.Voteinfo != nil {
		l = m.Voteinfo.Size()
		n += 1 + l + sovPhz(uint64(l))
	}
	if len(m.Cardinfo) > 0 {
		for _, e := range m.Cardinfo {
			l = e.Size()
			n += 1 + l + sovPhz(uint64(l))
		}
	}
	if m.Error != 0 {
		n += 1 + sovPhz(uint64(m.Error))
	}
	return n
}

func (m *CCreateZiRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	l = len(m.Rname)
	if l > 0 {
		n += 1 + l + sovPhz(uint64(l))
	}
	if m.Rtype != 0 {
		n += 1 + sovPhz(uint64(m.Rtype))
	}
	if m.Ante != 0 {
		n += 1 + sovPhz(uint64(m.Ante))
	}
	if m.Round != 0 {
		n += 1 + sovPhz(uint64(m.Round))
	}
	if m.Payment != 0 {
		n += 1 + sovPhz(uint64(m.Payment))
	}
	if m.Count != 0 {
		n += 1 + sovPhz(uint64(m.Count))
	}
	if m.Chat != 0 {
		n += 1 + sovPhz(uint64(m.Chat))
	}
	if m.Xi != 0 {
		n += 1 + sovPhz(uint64(m.Xi))
	}
	return n
}

func (m *SCreateZiRoom) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Rdata != nil {
		l = m.Rdata.Size()
		n += 1 + l + sovPhz(uint64(l))
	}
	if m.Error != 0 {
		n += 1 + sovPhz(uint64(m.Error))
	}
	return n
}

func (m *SZiCamein) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovPhz(uint64(l))
	}
	return n
}

func (m *SZiGameover) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Dealer != 0 {
		n += 1 + sovPhz(uint64(m.Dealer))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	if m.Round != 0 {
		n += 1 + sovPhz(uint64(m.Round))
	}
	if m.Xi != 0 {
		n += 1 + sovPhz(uint64(m.Xi))
	}
	if m.Fan != 0 {
		n += 1 + sovPhz(uint64(m.Fan))
	}
	if m.Deng != 0 {
		n += 1 + sovPhz(uint64(m.Deng))
	}
	if m.Di != 0 {
		n += 1 + sovPhz(uint64(m.Di))
	}
	if len(m.Seats) > 0 {
		for _, e := range m.Seats {
			l = e.Size()
			n += 1 + l + sovPhz(uint64(l))
		}
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovPhz(uint64(l))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPhz(uint64(l))
		}
	}
	if len(m.Lastcards) > 0 {
		l = 0
		for _, e := range m.Lastcards {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	if len(m.Combat) > 0 {
		for _, e := range m.Combat {
			l = e.Size()
			n += 1 + l + sovPhz(uint64(l))
		}
	}
	return n
}

func (m *CZiGameRecord) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Page != 0 {
		n += 1 + sovPhz(uint64(m.Page))
	}
	return n
}

func (m *SZiGameRecord) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPhz(uint64(l))
		}
	}
	return n
}

func (m *SPushDeal) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	return n
}

func (m *SPushDealerDeal) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	return n
}

func (m *SPushDealerBu) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	return n
}

func (m *SPushPaoHu) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	return n
}

func (m *SPushDraw) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	if m.Count != 0 {
		n += 1 + sovPhz(uint64(m.Count))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	return n
}

func (m *CPushDiscard) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	return n
}

func (m *SPushDiscard) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	if m.Error != 0 {
		n += 1 + sovPhz(uint64(m.Error))
	}
	return n
}

func (m *SPushAuto) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	return n
}

func (m *COperate) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	if len(m.Bione) > 0 {
		l = 0
		for _, e := range m.Bione {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	if len(m.Bitwo) > 0 {
		l = 0
		for _, e := range m.Bitwo {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	return n
}

func (m *SOperate) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Beseat != 0 {
		n += 1 + sovPhz(uint64(m.Beseat))
	}
	if m.Card != 0 {
		n += 1 + sovPhz(uint64(m.Card))
	}
	if m.Value != 0 {
		n += 1 + sovPhz(uint64(m.Value))
	}
	if len(m.Cards) > 0 {
		l = 0
		for _, e := range m.Cards {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	if len(m.Bione) > 0 {
		l = 0
		for _, e := range m.Bione {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	if len(m.Bitwo) > 0 {
		l = 0
		for _, e := range m.Bitwo {
			l += sovPhz(uint64(e))
		}
		n += 1 + sovPhz(uint64(l)) + l
	}
	if m.Error != 0 {
		n += 1 + sovPhz(uint64(m.Error))
	}
	return n
}

func (m *SPushStatus) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPhz(uint64(m.Code))
	}
	if m.Seat != 0 {
		n += 1 + sovPhz(uint64(m.Seat))
	}
	if m.Status != 0 {
		n += 1 + sovPhz(uint64(m.Status))
	}
	return n
}

func sovPhz(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPhz(x uint64) (n int) {
	return sovPhz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CEnterZiRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CEnterZiRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Invitecode:` + fmt.Sprintf("%v", this.Invitecode) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Dan:` + fmt.Sprintf("%v", this.Dan) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SEnterZiRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SEnterZiRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Roominfo:` + strings.Replace(fmt.Sprintf("%v", this.Roominfo), "RoomData", "RoomData", 1) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "RoomUser", "RoomUser", 1) + `,`,
		`Voteinfo:` + strings.Replace(fmt.Sprintf("%v", this.Voteinfo), "RoomVote", "RoomVote", 1) + `,`,
		`Cardinfo:` + strings.Replace(fmt.Sprintf("%v", this.Cardinfo), "RoomCard", "RoomCard", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CCreateZiRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CCreateZiRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rname:` + fmt.Sprintf("%v", this.Rname) + `,`,
		`Rtype:` + fmt.Sprintf("%v", this.Rtype) + `,`,
		`Ante:` + fmt.Sprintf("%v", this.Ante) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Payment:` + fmt.Sprintf("%v", this.Payment) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Chat:` + fmt.Sprintf("%v", this.Chat) + `,`,
		`Xi:` + fmt.Sprintf("%v", this.Xi) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCreateZiRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCreateZiRoom{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Rdata:` + strings.Replace(fmt.Sprintf("%v", this.Rdata), "RoomData", "RoomData", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SZiCamein) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SZiCamein{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Userinfo:` + strings.Replace(fmt.Sprintf("%v", this.Userinfo), "RoomUser", "RoomUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SZiGameover) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SZiGameover{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Dealer:` + fmt.Sprintf("%v", this.Dealer) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Round:` + fmt.Sprintf("%v", this.Round) + `,`,
		`Xi:` + fmt.Sprintf("%v", this.Xi) + `,`,
		`Fan:` + fmt.Sprintf("%v", this.Fan) + `,`,
		`Deng:` + fmt.Sprintf("%v", this.Deng) + `,`,
		`Di:` + fmt.Sprintf("%v", this.Di) + `,`,
		`Seats:` + strings.Replace(fmt.Sprintf("%v", this.Seats), "RoomSeat", "RoomSeat", 1) + `,`,
		`Cards:` + strings.Replace(fmt.Sprintf("%v", this.Cards), "RoomCard", "RoomCard", 1) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "ZiRoomOver", "ZiRoomOver", 1) + `,`,
		`Lastcards:` + fmt.Sprintf("%v", this.Lastcards) + `,`,
		`Combat:` + strings.Replace(fmt.Sprintf("%v", this.Combat), "DanOver", "DanOver", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CZiGameRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CZiGameRecord{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SZiGameRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SZiGameRecord{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "ZiRecordList", "ZiRecordList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushDeal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushDeal{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushDealerDeal) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushDealerDeal{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushDealerBu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushDealerBu{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushPaoHu) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushPaoHu{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushDraw) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushDraw{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CPushDiscard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CPushDiscard{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushDiscard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushDiscard{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushAuto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushAuto{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *COperate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&COperate{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Bione:` + fmt.Sprintf("%v", this.Bione) + `,`,
		`Bitwo:` + fmt.Sprintf("%v", this.Bitwo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SOperate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SOperate{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Beseat:` + fmt.Sprintf("%v", this.Beseat) + `,`,
		`Card:` + fmt.Sprintf("%v", this.Card) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Cards:` + fmt.Sprintf("%v", this.Cards) + `,`,
		`Bione:` + fmt.Sprintf("%v", this.Bione) + `,`,
		`Bitwo:` + fmt.Sprintf("%v", this.Bitwo) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SPushStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SPushStatus{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Seat:` + fmt.Sprintf("%v", this.Seat) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPhz(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CEnterZiRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEnterZiRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEnterZiRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invitecode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invitecode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dan = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SEnterZiRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SEnterZiRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SEnterZiRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roominfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Roominfo == nil {
				m.Roominfo = &RoomData{}
			}
			if err := m.Roominfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Userinfo = append(m.Userinfo, &RoomUser{})
			if err := m.Userinfo[len(m.Userinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voteinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Voteinfo == nil {
				m.Voteinfo = &RoomVote{}
			}
			if err := m.Voteinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cardinfo = append(m.Cardinfo, &RoomCard{})
			if err := m.Cardinfo[len(m.Cardinfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCreateZiRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCreateZiRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCreateZiRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rtype", wireType)
			}
			m.Rtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rtype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			m.Payment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payment |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			m.Chat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xi", wireType)
			}
			m.Xi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCreateZiRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCreateZiRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCreateZiRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rdata == nil {
				m.Rdata = &RoomData{}
			}
			if err := m.Rdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SZiCamein) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SZiCamein: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SZiCamein: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &RoomUser{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SZiGameover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SZiGameover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SZiGameover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dealer", wireType)
			}
			m.Dealer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dealer |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xi", wireType)
			}
			m.Xi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xi |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fan", wireType)
			}
			m.Fan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fan |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deng", wireType)
			}
			m.Deng = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deng |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Di", wireType)
			}
			m.Di = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Di |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seats = append(m.Seats, &RoomSeat{})
			if err := m.Seats[len(m.Seats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &RoomCard{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ZiRoomOver{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Lastcards = append(m.Lastcards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Lastcards = append(m.Lastcards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastcards", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Combat = append(m.Combat, &DanOver{})
			if err := m.Combat[len(m.Combat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CZiGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CZiGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CZiGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SZiGameRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SZiGameRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SZiGameRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPhz
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ZiRecordList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushDealerDeal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushDealerDeal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushDealerDeal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushDealerBu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushDealerBu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushDealerBu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushPaoHu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushPaoHu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushPaoHu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushDraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushDraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushDraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPushDiscard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPushDiscard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPushDiscard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushDiscard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushDiscard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushDiscard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushAuto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushAuto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushAuto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *COperate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: COperate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: COperate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bione = append(m.Bione, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bione = append(m.Bione, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bione", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bitwo = append(m.Bitwo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bitwo = append(m.Bitwo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitwo", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SOperate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SOperate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SOperate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beseat", wireType)
			}
			m.Beseat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Beseat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			m.Card = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Card |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cards = append(m.Cards, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cards = append(m.Cards, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bione = append(m.Bione, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bione = append(m.Bione, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bione", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bitwo = append(m.Bitwo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPhz
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPhz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bitwo = append(m.Bitwo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bitwo", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ErrCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPushStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPushStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPushStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seat", wireType)
			}
			m.Seat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPhz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPhz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPhz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPhz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPhz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPhz
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPhz
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPhz(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPhz = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPhz   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("phz.proto", fileDescriptorPhz) }

var fileDescriptorPhz = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0xde, 0x71, 0xe2, 0x6c, 0xf2, 0x26, 0x5e, 0x2a, 0x0b, 0x55, 0x56, 0x85, 0xac, 0x60, 0x38,
	0xe4, 0x80, 0xf6, 0x50, 0x24, 0x38, 0x53, 0x6f, 0x05, 0x95, 0x40, 0xad, 0xc6, 0x82, 0xc3, 0x4a,
	0x20, 0x4d, 0x32, 0xd3, 0xee, 0xa0, 0xc4, 0x63, 0x8d, 0xc7, 0xd9, 0x96, 0x13, 0x12, 0x27, 0x6e,
	0xfc, 0x0c, 0x7e, 0x0a, 0x17, 0xa4, 0x1e, 0xe1, 0xc6, 0x86, 0x0b, 0x17, 0x50, 0x7f, 0x02, 0x9a,
	0x77, 0x1c, 0x27, 0x29, 0x76, 0x97, 0x0a, 0xf6, 0xf6, 0x7e, 0x3c, 0xf3, 0x7e, 0x3c, 0xcf, 0x64,
	0x1c, 0x18, 0x15, 0x17, 0xdf, 0x9c, 0x16, 0x5a, 0x19, 0x15, 0x7a, 0xc5, 0xfc, 0xce, 0x70, 0xad,
	0x9c, 0x77, 0x07, 0x16, 0x8a, 0x0b, 0x67, 0x27, 0x1c, 0x26, 0xe9, 0xfd, 0xdc, 0x08, 0x7d, 0x2e,
	0xa9, 0x52, 0xab, 0x30, 0x84, 0xbe, 0xcd, 0x46, 0x64, 0x4a, 0x66, 0x01, 0x45, 0x3b, 0x8c, 0x01,
	0x64, 0xbe, 0x96, 0x46, 0x60, 0xc6, 0x9b, 0x92, 0xd9, 0x88, 0xee, 0x45, 0xc2, 0x13, 0xf0, 0x24,
	0x8f, 0x7a, 0x18, 0xf7, 0x24, 0x0f, 0x6f, 0x41, 0x8f, 0xb3, 0x3c, 0xea, 0x4f, 0xc9, 0x6c, 0x48,
	0xad, 0x99, 0xfc, 0x49, 0x60, 0x92, 0x5d, 0xd7, 0x66, 0x06, 0x43, 0xad, 0xd4, 0x4a, 0xe6, 0x8f,
	0x15, 0x36, 0x19, 0xdf, 0x9d, 0x9c, 0x16, 0xf3, 0x53, 0x8b, 0x3f, 0x63, 0x86, 0xd1, 0x26, 0x6b,
	0x91, 0x55, 0x29, 0x34, 0x22, 0x7b, 0xd3, 0xde, 0x3e, 0xf2, 0xf3, 0x52, 0x68, 0xda, 0x64, 0x2d,
	0x72, 0xad, 0x8c, 0x40, 0x64, 0xff, 0xb0, 0xe6, 0x17, 0xca, 0x08, 0xda, 0x64, 0x2d, 0x72, 0xc1,
	0x34, 0x47, 0xa4, 0x7f, 0x58, 0x33, 0x65, 0x9a, 0xd3, 0x26, 0x1b, 0xbe, 0x0d, 0xbe, 0xd0, 0x5a,
	0xe9, 0x68, 0x30, 0x25, 0xb3, 0x93, 0xbb, 0x63, 0x0b, 0xbb, 0xaf, 0x75, 0xaa, 0xb8, 0xa0, 0x2e,
	0x93, 0xfc, 0x4c, 0x20, 0x48, 0x53, 0x2d, 0x98, 0x11, 0xaf, 0x58, 0xf8, 0x4d, 0xf0, 0x75, 0xce,
	0x56, 0x5b, 0x4a, 0x9d, 0x83, 0x51, 0xf3, 0xac, 0x10, 0x48, 0x68, 0x40, 0x9d, 0x63, 0xcf, 0xb3,
	0xdc, 0x08, 0x5c, 0x22, 0xa0, 0x68, 0x23, 0x52, 0x55, 0x39, 0x8f, 0xfc, 0x1a, 0x69, 0x9d, 0x30,
	0x82, 0xe3, 0x82, 0x3d, 0x5b, 0x89, 0xdc, 0xe0, 0x80, 0x01, 0xdd, 0xba, 0x16, 0xbf, 0x50, 0x55,
	0x6e, 0xa2, 0x63, 0x87, 0x47, 0x07, 0x27, 0xbb, 0x60, 0x26, 0x1a, 0xd6, 0x93, 0x5d, 0x30, 0x63,
	0x15, 0x7d, 0x2a, 0xa3, 0x11, 0x46, 0xbc, 0xa7, 0x32, 0xf9, 0x1a, 0x82, 0xec, 0xda, 0x75, 0x12,
	0xf0, 0x35, 0x67, 0x86, 0xb5, 0x8a, 0xe7, 0x52, 0x3b, 0xee, 0x7a, 0x9d, 0xdc, 0x3d, 0x80, 0x51,
	0x76, 0x2e, 0x53, 0xb6, 0x12, 0x32, 0xef, 0xba, 0x27, 0x8d, 0xfa, 0x2f, 0xb5, 0x3a, 0x54, 0x3f,
	0xf9, 0xcb, 0x83, 0x71, 0x76, 0x2e, 0x3f, 0x66, 0x2b, 0xa1, 0xd6, 0x42, 0xb7, 0x56, 0xbb, 0x0d,
	0x03, 0x2e, 0xd8, 0x52, 0x68, 0xac, 0x15, 0xd0, 0xda, 0xb3, 0xd8, 0x52, 0x30, 0x53, 0xab, 0x80,
	0xb6, 0x25, 0x70, 0xcd, 0x96, 0xd5, 0x56, 0x05, 0xe7, 0x74, 0xc8, 0xe0, 0x28, 0x1c, 0x6c, 0x29,
	0xb4, 0x3f, 0x8a, 0xc7, 0x2c, 0xaf, 0xa9, 0xb7, 0xa6, 0xed, 0xc0, 0x45, 0xfe, 0x64, 0x4b, 0xbc,
	0xb5, 0xed, 0x29, 0xde, 0x10, 0xcf, 0xa5, 0xe5, 0xd4, 0x76, 0x2e, 0x23, 0x38, 0xbc, 0x92, 0x99,
	0x60, 0x86, 0xba, 0x94, 0xc5, 0xd8, 0xbb, 0x59, 0x46, 0xe3, 0x96, 0x6b, 0xeb, 0x52, 0x61, 0x02,
	0xfd, 0xa5, 0x2c, 0x4d, 0x34, 0x41, 0xc8, 0x89, 0x85, 0x38, 0x25, 0x1f, 0xae, 0x85, 0xa6, 0x98,
	0x0b, 0xdf, 0x82, 0xd1, 0x92, 0x95, 0xc6, 0xd5, 0x0a, 0xa6, 0xbd, 0x59, 0x40, 0x77, 0x81, 0xf0,
	0x1d, 0x18, 0x2c, 0xd4, 0x6a, 0xce, 0x4c, 0x74, 0x82, 0x35, 0x50, 0xba, 0x33, 0x96, 0x63, 0x81,
	0x3a, 0x95, 0x7c, 0x08, 0x41, 0xea, 0xf8, 0xa6, 0x62, 0xa1, 0x34, 0x6f, 0x65, 0x3c, 0x84, 0x7e,
	0xc1, 0x9e, 0x88, 0x9a, 0x6f, 0xb4, 0x93, 0x07, 0x10, 0x64, 0xd7, 0x1e, 0x7c, 0xb7, 0x5e, 0xc2,
	0xc3, 0x01, 0x6e, 0xd5, 0x4b, 0x20, 0xfe, 0x53, 0x59, 0x1a, 0xb7, 0x06, 0xde, 0x9f, 0x47, 0x55,
	0x79, 0x71, 0x26, 0xd8, 0xb2, 0xab, 0x3f, 0x2a, 0xeb, 0x1d, 0x2a, 0xeb, 0xf6, 0xee, 0xe1, 0xde,
	0xce, 0x49, 0x16, 0xf0, 0x46, 0x53, 0x4a, 0xe8, 0xd7, 0x2a, 0x68, 0x71, 0x4c, 0xf3, 0xed, 0xf5,
	0xb1, 0x76, 0xfb, 0xf5, 0x49, 0x18, 0x04, 0x7b, 0x4d, 0xee, 0x55, 0x37, 0xd0, 0xe2, 0x2b, 0x00,
	0x6c, 0xf1, 0x88, 0xa9, 0x4f, 0x6e, 0xa2, 0xfe, 0xf7, 0x64, 0xcb, 0xb9, 0x66, 0x97, 0xff, 0x7f,
	0xfd, 0xdd, 0xc3, 0xe5, 0xef, 0x3f, 0x5c, 0x8d, 0x66, 0x83, 0x7d, 0xcd, 0x3e, 0x80, 0x49, 0x8a,
	0xa3, 0xc8, 0x12, 0x2b, 0x76, 0x4c, 0x83, 0x9d, 0xbd, 0x5d, 0xe7, 0xe4, 0x3b, 0xfb, 0x89, 0xfa,
	0x17, 0x07, 0xff, 0xc3, 0x1a, 0xcd, 0xe3, 0xe7, 0x77, 0x3e, 0x7e, 0x5f, 0xd6, 0x44, 0x7e, 0x54,
	0x19, 0x75, 0x03, 0x42, 0xad, 0x61, 0x98, 0x3e, 0x2c, 0x84, 0x66, 0x46, 0x74, 0x7d, 0x91, 0xdc,
	0x29, 0xef, 0x65, 0xfa, 0xff, 0xf1, 0xe3, 0xb0, 0xd1, 0xb9, 0x54, 0xb9, 0xed, 0x80, 0x51, 0x74,
	0x5c, 0xd4, 0x5c, 0xba, 0x6f, 0x28, 0x46, 0xcd, 0xa5, 0x4a, 0x7e, 0x25, 0x30, 0xcc, 0x5e, 0xd5,
	0xb8, 0x6d, 0xad, 0xdb, 0x30, 0x98, 0x8b, 0xbd, 0x37, 0xb8, 0xf6, 0x9a, 0x75, 0xfb, 0x6d, 0xeb,
	0xfa, 0xad, 0x83, 0x0f, 0x5a, 0x07, 0x3f, 0x6e, 0x1d, 0x7c, 0xb8, 0x37, 0xf8, 0x4e, 0xb2, 0x51,
	0xa7, 0x64, 0x9f, 0xc1, 0x18, 0x25, 0xcb, 0x0c, 0x33, 0x55, 0xf9, 0x3a, 0xdb, 0x95, 0x78, 0x02,
	0xb7, 0xf3, 0x69, 0xed, 0xdd, 0x7b, 0xef, 0xf9, 0x55, 0x7c, 0xf4, 0xcb, 0x55, 0x7c, 0xf4, 0xe2,
	0x2a, 0x26, 0xdf, 0x6e, 0x62, 0xf2, 0xe3, 0x26, 0x26, 0x3f, 0x6d, 0x62, 0xf2, 0x7c, 0x13, 0x93,
	0xdf, 0x36, 0x31, 0xf9, 0x63, 0x13, 0x1f, 0xbd, 0xd8, 0xc4, 0xe4, 0x87, 0xdf, 0xe3, 0xa3, 0xf9,
	0x00, 0xff, 0xc5, 0xbd, 0xff, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xe1, 0x1c, 0x4f, 0xec,
	0x09, 0x00, 0x00,
}
